op {
  graph_op_name: "Bitcast"
  summary: "Bitcasts a tensor from one type to another without copying data."
  description: <<END
Given a tensor `input`, this operation returns a tensor that has the same buffer
data as `input` with datatype `type`.

If the input datatype `T` is larger than the output datatype `type` then the
shape changes from [...] to [..., sizeof(`T`)/sizeof(`type`)].

If `T` is smaller than `type`, the operator requires that the rightmost
dimension be equal to sizeof(`type`)/sizeof(`T`). The shape then goes from
[..., sizeof(`type`)/sizeof(`T`)] to [...].

tf.bitcast can be used over tf.cast when you have to assign some unsigned data type.
For example,
 tf.bitcast(tf.cast(my_tensor, tf.int8), tf.uint8)

Example,
>>> import tensorflow as tf
>>> x = [1., 2., 3.]
>>> y = [0., 2., 3.]
>>> equality =tf.equal(x,y)
>>> equality_cast = tf.cast(equality,tf.float32)
>>> equality_bitcast = tf.bitcast(equality_cast,tf.uint8)
>>> sess = tf.Session()
>>> print(sess.run(equality))
>>> [False True True]
>>> print(sess.run(equality_cast))
>>> [0. 1. 1.]
>>> print(sess.run(equality_bitcast))
>>> [[ 0 0 0 0]
     [ 0 0 128 63]
     [ 0 0 128 63]]
*NOTE*: Bitcast is implemented as a low-level cast, so machines with different
endian orderings will give different results.
END
}
