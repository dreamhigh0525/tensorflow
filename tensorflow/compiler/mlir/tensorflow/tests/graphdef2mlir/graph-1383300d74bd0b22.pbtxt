# RUN: tf-mlir-translate -graphdef-to-mlir %s -o - | FileCheck %s

node {
  name: "placeholder_0_arg"
  op: "_Arg"
  device: "/device:TPU_REPLICATED_CORE:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index"
    value {
      i: 0
    }
  }
}
node {
  name: "tpu/tpu/Shape"
  op: "Shape"
  input: "placeholder_0_arg"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "tpu/tpu/strided_slice/stack"
  op: "Const"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "tpu/tpu/strided_slice/stack_1"
  op: "Const"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "tpu/tpu/strided_slice/stack_2"
  op: "Const"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "tpu/tpu/strided_slice"
  op: "StridedSlice"
  input: "tpu/tpu/Shape"
  input: "tpu/tpu/strided_slice/stack"
  input: "tpu/tpu/strided_slice/stack_1"
  input: "tpu/tpu/strided_slice/stack_2"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "tpu/tpu/Plus1RNNCellZeroState/ExpandDims/dim"
  op: "Const"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "tpu/tpu/Plus1RNNCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "tpu/tpu/strided_slice"
  input: "tpu/tpu/Plus1RNNCellZeroState/ExpandDims/dim"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "tpu/tpu/Plus1RNNCellZeroState/Const"
  op: "Const"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "tpu/tpu/Plus1RNNCellZeroState/concat/axis"
  op: "Const"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "tpu/tpu/Plus1RNNCellZeroState/concat"
  op: "ConcatV2"
  input: "tpu/tpu/Plus1RNNCellZeroState/ExpandDims"
  input: "tpu/tpu/Plus1RNNCellZeroState/Const"
  input: "tpu/tpu/Plus1RNNCellZeroState/concat/axis"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "tpu/tpu/Plus1RNNCellZeroState/zeros/Const"
  op: "Const"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0
      }
    }
  }
}
node {
  name: "tpu/tpu/Plus1RNNCellZeroState/zeros"
  op: "Fill"
  input: "tpu/tpu/Plus1RNNCellZeroState/concat"
  input: "tpu/tpu/Plus1RNNCellZeroState/zeros/Const"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "tpu/tpu/Plus1RNNCellZeroState/ExpandDims_1/dim"
  op: "Const"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "tpu/tpu/Plus1RNNCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "tpu/tpu/strided_slice"
  input: "tpu/tpu/Plus1RNNCellZeroState/ExpandDims_1/dim"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "tpu/tpu/Plus1RNNCellZeroState/Const_1"
  op: "Const"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "tpu/tpu/sequence_length"
  op: "Const"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "tpu/tpu/ExpandDims/dim"
  op: "Const"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "tpu/tpu/ExpandDims"
  op: "ExpandDims"
  input: "tpu/tpu/strided_slice"
  input: "tpu/tpu/ExpandDims/dim"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "tpu/tpu/Const"
  op: "Const"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "tpu/tpu/concat/axis"
  op: "Const"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "tpu/tpu/concat"
  op: "ConcatV2"
  input: "tpu/tpu/ExpandDims"
  input: "tpu/tpu/Const"
  input: "tpu/tpu/concat/axis"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "tpu/tpu/zeros/Const"
  op: "Const"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0
      }
    }
  }
}
node {
  name: "tpu/tpu/zeros"
  op: "Fill"
  input: "tpu/tpu/concat"
  input: "tpu/tpu/zeros/Const"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "tpu/tpu/Const_1"
  op: "Const"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "tpu/tpu/Const_2"
  op: "Const"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "tpu/tpu/Min"
  op: "Min"
  input: "tpu/tpu/sequence_length"
  input: "tpu/tpu/Const_2"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "tpu/tpu/Const_3"
  op: "Const"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "tpu/tpu/Max"
  op: "Max"
  input: "tpu/tpu/sequence_length"
  input: "tpu/tpu/Const_3"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "tpu/tpu/LessEqual/y"
  op: "Const"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "tpu/tpu/LessEqual"
  op: "LessEqual"
  input: "tpu/tpu/sequence_length"
  input: "tpu/tpu/LessEqual/y"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "tpu/tpu/LessEqual_1/y"
  op: "Const"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "tpu/tpu/LessEqual_1"
  op: "LessEqual"
  input: "tpu/tpu/Max"
  input: "tpu/tpu/LessEqual_1/y"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "tpu/tpu/cond/Switch"
  op: "Switch"
  input: "tpu/tpu/LessEqual_1"
  input: "tpu/tpu/LessEqual_1"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "tpu/tpu/cond/switch_t"
  op: "Identity"
  input: "tpu/tpu/cond/Switch:1"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "tpu/tpu/cond/switch_f"
  op: "Identity"
  input: "tpu/tpu/cond/Switch"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "tpu/tpu/cond/pred_id"
  op: "Identity"
  input: "tpu/tpu/LessEqual_1"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "tpu/tpu/cond/Switch_1"
  op: "Switch"
  input: "tpu/tpu/zeros"
  input: "tpu/tpu/cond/pred_id"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@tpu/tpu/zeros"
      }
    }
  }
}
node {
  name: "tpu/tpu/cond/Switch_2"
  op: "Switch"
  input: "tpu/tpu/Plus1RNNCellZeroState/zeros"
  input: "tpu/tpu/cond/pred_id"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@tpu/tpu/Plus1RNNCellZeroState/zeros"
      }
    }
  }
}
node {
  name: "tpu/tpu/cond/add/y"
  op: "Const"
  input: "^tpu/tpu/cond/switch_f"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1
      }
    }
  }
}
node {
  name: "tpu/tpu/cond/add/Switch"
  op: "Switch"
  input: "placeholder_0_arg"
  input: "tpu/tpu/cond/pred_id"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Placeholder"
      }
    }
  }
}
node {
  name: "tpu/tpu/cond/add"
  op: "Add"
  input: "tpu/tpu/cond/add/Switch"
  input: "tpu/tpu/cond/add/y"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "tpu/tpu/cond/add_1/y"
  op: "Const"
  input: "^tpu/tpu/cond/switch_f"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1
      }
    }
  }
}
node {
  name: "tpu/tpu/cond/add_1/Switch"
  op: "Switch"
  input: "tpu/tpu/Plus1RNNCellZeroState/zeros"
  input: "tpu/tpu/cond/pred_id"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@tpu/tpu/Plus1RNNCellZeroState/zeros"
      }
    }
  }
}
node {
  name: "tpu/tpu/cond/add_1"
  op: "Add"
  input: "tpu/tpu/cond/add_1/Switch"
  input: "tpu/tpu/cond/add_1/y"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "tpu/tpu/cond/Greater/y"
  op: "Const"
  input: "^tpu/tpu/cond/switch_f"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "tpu/tpu/cond/Greater/Switch"
  op: "Switch"
  input: "tpu/tpu/Min"
  input: "tpu/tpu/cond/pred_id"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@tpu/tpu/Min"
      }
    }
  }
}
node {
  name: "tpu/tpu/cond/Greater"
  op: "Greater"
  input: "tpu/tpu/cond/Greater/Switch"
  input: "tpu/tpu/cond/Greater/y"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "tpu/tpu/cond/cond/Switch"
  op: "Switch"
  input: "tpu/tpu/cond/Greater"
  input: "tpu/tpu/cond/Greater"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "tpu/tpu/cond/cond/switch_t"
  op: "Identity"
  input: "tpu/tpu/cond/cond/Switch:1"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "tpu/tpu/cond/cond/switch_f"
  op: "Identity"
  input: "tpu/tpu/cond/cond/Switch"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "tpu/tpu/cond/cond/pred_id"
  op: "Identity"
  input: "tpu/tpu/cond/Greater"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "tpu/tpu/cond/cond/Switch_1"
  op: "Switch"
  input: "tpu/tpu/cond/add"
  input: "tpu/tpu/cond/cond/pred_id"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@tpu/tpu/cond/add"
      }
    }
  }
}
node {
  name: "tpu/tpu/cond/cond/Switch_2"
  op: "Switch"
  input: "tpu/tpu/cond/add_1"
  input: "tpu/tpu/cond/cond/pred_id"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@tpu/tpu/cond/add_1"
      }
    }
  }
}
node {
  name: "tpu/tpu/cond/cond/Select/Switch"
  op: "Switch"
  input: "tpu/tpu/LessEqual"
  input: "tpu/tpu/cond/pred_id"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@tpu/tpu/LessEqual"
      }
    }
  }
}
node {
  name: "tpu/tpu/cond/cond/Select/Switch_1"
  op: "Switch"
  input: "tpu/tpu/cond/cond/Select/Switch"
  input: "tpu/tpu/cond/cond/pred_id"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@tpu/tpu/LessEqual"
      }
    }
  }
}
node {
  name: "tpu/tpu/cond/cond/Select/Switch_2"
  op: "Switch"
  input: "tpu/tpu/zeros"
  input: "tpu/tpu/cond/pred_id"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@tpu/tpu/zeros"
      }
    }
  }
}
node {
  name: "tpu/tpu/cond/cond/Select/Switch_3"
  op: "Switch"
  input: "tpu/tpu/cond/cond/Select/Switch_2"
  input: "tpu/tpu/cond/cond/pred_id"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@tpu/tpu/zeros"
      }
    }
  }
}
node {
  name: "tpu/tpu/cond/cond/Select/Switch_4"
  op: "Switch"
  input: "tpu/tpu/cond/add"
  input: "tpu/tpu/cond/cond/pred_id"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@tpu/tpu/cond/add"
      }
    }
  }
}
node {
  name: "tpu/tpu/cond/cond/Select"
  op: "Select"
  input: "tpu/tpu/cond/cond/Select/Switch_1"
  input: "tpu/tpu/cond/cond/Select/Switch_3"
  input: "tpu/tpu/cond/cond/Select/Switch_4"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@tpu/tpu/cond/add"
      }
    }
  }
}
node {
  name: "tpu/tpu/cond/cond/Select_1/Switch"
  op: "Switch"
  input: "tpu/tpu/cond/add_1/Switch"
  input: "tpu/tpu/cond/cond/pred_id"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@tpu/tpu/Plus1RNNCellZeroState/zeros"
      }
    }
  }
}
node {
  name: "tpu/tpu/cond/cond/Select_1/Switch_1"
  op: "Switch"
  input: "tpu/tpu/cond/add_1"
  input: "tpu/tpu/cond/cond/pred_id"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@tpu/tpu/cond/add_1"
      }
    }
  }
}
node {
  name: "tpu/tpu/cond/cond/Select_1"
  op: "Select"
  input: "tpu/tpu/cond/cond/Select/Switch_1"
  input: "tpu/tpu/cond/cond/Select_1/Switch"
  input: "tpu/tpu/cond/cond/Select_1/Switch_1"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@tpu/tpu/cond/add_1"
      }
    }
  }
}
node {
  name: "tpu/tpu/cond/cond/Merge"
  op: "Merge"
  input: "tpu/tpu/cond/cond/Select"
  input: "tpu/tpu/cond/cond/Switch_1:1"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "tpu/tpu/cond/cond/Merge_1"
  op: "Merge"
  input: "tpu/tpu/cond/cond/Select_1"
  input: "tpu/tpu/cond/cond/Switch_2:1"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "tpu/tpu/cond/Merge"
  op: "Merge"
  input: "tpu/tpu/cond/cond/Merge"
  input: "tpu/tpu/cond/Switch_1:1"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "tpu/tpu/cond/Merge_1"
  op: "Merge"
  input: "tpu/tpu/cond/cond/Merge_1"
  input: "tpu/tpu/cond/Switch_2:1"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "tpu/NoOp"
  op: "NoOp"
  device: "/device:TPU_REPLICATED_CORE"
}
node {
  name: "tpu/packed"
  op: "Pack"
  input: "tpu/tpu/cond/Merge"
  device: "/device:TPU_REPLICATED_CORE:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "tpu/Identity"
  op: "Identity"
  input: "tpu/packed"
  device: "/device:TPU_REPLICATED_CORE:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "tpu/Identity_1"
  op: "Identity"
  input: "tpu/tpu/cond/Merge_1"
  device: "/device:TPU_REPLICATED_CORE"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "tpu_identity_0_retval_RetVal"
  op: "_Retval"
  input: "tpu/Identity"
  device: "/device:TPU_REPLICATED_CORE:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index"
    value {
      i: 0
    }
  }
}
node {
  name: "tpu_identity_1_0_retval_RetVal"
  op: "_Retval"
  input: "tpu/Identity_1"
  device: "/device:TPU_REPLICATED_CORE:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index"
    value {
      i: 1
    }
  }
}
library {
}
versions {
  producer: 26
}

# CHECK:       func @main() {
# CHECK-NEXT:    %0:2 = "_tf._Arg"() {T = "tfdtype$DT_FLOAT", device = "/device:TPU_REPLICATED_CORE:0", index = 0 : i64, name = "placeholder_0_arg"} : () -> (tensor<*xf32>, !_tf.control)
# CHECK-NEXT:    %1:2 = "_tf.Shape"(%0#0) {T = "tfdtype$DT_FLOAT", device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/Shape", out_type = "tfdtype$DT_INT32"} : (tensor<*xf32>) -> (tensor<?xi32>, !_tf.control)
# CHECK-NEXT:    %2 = "_tf.NoOp"() {device = "/device:TPU_REPLICATED_CORE", name = "tpu/NoOp"} : () -> !_tf.control
# CHECK-NEXT:    %3:2 = "_tf.Const"() {device = "/device:TPU_REPLICATED_CORE", dtype = "tfdtype$DT_INT32", name = "tpu/tpu/Const", value = dense<1> : tensor<1xi32>} : () -> (tensor<1xi32>, !_tf.control)
# CHECK-NEXT:    %4:2 = "_tf.Const"() {device = "/device:TPU_REPLICATED_CORE", dtype = "tfdtype$DT_INT32", name = "tpu/tpu/Const_1", value = dense<1> : tensor<1xi32>} : () -> (tensor<1xi32>, !_tf.control)
# CHECK-NEXT:    %5:2 = "_tf.Const"() {device = "/device:TPU_REPLICATED_CORE", dtype = "tfdtype$DT_INT32", name = "tpu/tpu/Const_2", value = dense<0> : tensor<1xi32>} : () -> (tensor<1xi32>, !_tf.control)
# CHECK-NEXT:    %6:2 = "_tf.Const"() {device = "/device:TPU_REPLICATED_CORE", dtype = "tfdtype$DT_INT32", name = "tpu/tpu/Const_3", value = dense<0> : tensor<1xi32>} : () -> (tensor<1xi32>, !_tf.control)
# CHECK-NEXT:    %7:2 = "_tf.Const"() {device = "/device:TPU_REPLICATED_CORE", dtype = "tfdtype$DT_INT32", name = "tpu/tpu/ExpandDims/dim", value = dense<0> : tensor<i32>} : () -> (tensor<i32>, !_tf.control)
# CHECK-NEXT:    %8:2 = "_tf.Const"() {device = "/device:TPU_REPLICATED_CORE", dtype = "tfdtype$DT_INT32", name = "tpu/tpu/LessEqual/y", value = dense<0> : tensor<i32>} : () -> (tensor<i32>, !_tf.control)
# CHECK-NEXT:    %9:2 = "_tf.Const"() {device = "/device:TPU_REPLICATED_CORE", dtype = "tfdtype$DT_INT32", name = "tpu/tpu/LessEqual_1/y", value = dense<0> : tensor<i32>} : () -> (tensor<i32>, !_tf.control)
# CHECK-NEXT:    %10:2 = "_tf.Const"() {device = "/device:TPU_REPLICATED_CORE", dtype = "tfdtype$DT_INT32", name = "tpu/tpu/Plus1RNNCellZeroState/Const", value = dense<1> : tensor<1xi32>} : () -> (tensor<1xi32>, !_tf.control)
# CHECK-NEXT:    %11:2 = "_tf.Const"() {device = "/device:TPU_REPLICATED_CORE", dtype = "tfdtype$DT_INT32", name = "tpu/tpu/Plus1RNNCellZeroState/Const_1", value = dense<1> : tensor<1xi32>} : () -> (tensor<1xi32>, !_tf.control)
# CHECK-NEXT:    %12:2 = "_tf.Const"() {device = "/device:TPU_REPLICATED_CORE", dtype = "tfdtype$DT_INT32", name = "tpu/tpu/Plus1RNNCellZeroState/ExpandDims/dim", value = dense<0> : tensor<i32>} : () -> (tensor<i32>, !_tf.control)
# CHECK-NEXT:    %13:2 = "_tf.Const"() {device = "/device:TPU_REPLICATED_CORE", dtype = "tfdtype$DT_INT32", name = "tpu/tpu/Plus1RNNCellZeroState/ExpandDims_1/dim", value = dense<0> : tensor<i32>} : () -> (tensor<i32>, !_tf.control)
# CHECK-NEXT:    %14:2 = "_tf.Const"() {device = "/device:TPU_REPLICATED_CORE", dtype = "tfdtype$DT_INT32", name = "tpu/tpu/Plus1RNNCellZeroState/concat/axis", value = dense<0> : tensor<i32>} : () -> (tensor<i32>, !_tf.control)
# CHECK-NEXT:    %15:2 = "_tf.Const"() {device = "/device:TPU_REPLICATED_CORE", dtype = "tfdtype$DT_FLOAT", name = "tpu/tpu/Plus1RNNCellZeroState/zeros/Const", value = dense<0.000000e+00> : tensor<f32>} : () -> (tensor<f32>, !_tf.control)
# CHECK-NEXT:    %16:2 = "_tf.Const"() {device = "/device:TPU_REPLICATED_CORE", dtype = "tfdtype$DT_INT32", name = "tpu/tpu/concat/axis", value = dense<0> : tensor<i32>} : () -> (tensor<i32>, !_tf.control)
# CHECK-NEXT:    %17:2 = "_tf.Const"() {device = "/device:TPU_REPLICATED_CORE", dtype = "tfdtype$DT_INT32", name = "tpu/tpu/sequence_length", value = dense<1> : tensor<1xi32>} : () -> (tensor<1xi32>, !_tf.control)
# CHECK-NEXT:    %18:2 = "_tf.LessEqual"(%17#0, %8#0) {T = "tfdtype$DT_INT32", device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/LessEqual"} : (tensor<1xi32>, tensor<i32>) -> (tensor<1xi1>, !_tf.control)
# CHECK-NEXT:    %19:2 = "_tf.Max"(%17#0, %6#0) {T = "tfdtype$DT_INT32", Tidx = "tfdtype$DT_INT32", device = "/device:TPU_REPLICATED_CORE", keep_dims = false, name = "tpu/tpu/Max"} : (tensor<1xi32>, tensor<1xi32>) -> (tensor<i32>, !_tf.control)
# CHECK-NEXT:    %20:2 = "_tf.LessEqual"(%19#0, %9#0) {T = "tfdtype$DT_INT32", device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/LessEqual_1"} : (tensor<i32>, tensor<i32>) -> (tensor<i1>, !_tf.control)
# CHECK-NEXT:    %21:3 = "_tf.Switch"(%20#0, %20#0) {T = "tfdtype$DT_BOOL", device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/Switch"} : (tensor<i1>, tensor<i1>) -> (tensor<i1>, tensor<i1>, !_tf.control)
# CHECK-NEXT:    %22:2 = "_tf.Identity"(%21#0) {T = "tfdtype$DT_BOOL", device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/switch_f"} : (tensor<i1>) -> (tensor<i1>, !_tf.control)
# CHECK-NEXT:    %23:2 = "_tf.Const"(%22#1) {device = "/device:TPU_REPLICATED_CORE", dtype = "tfdtype$DT_INT32", name = "tpu/tpu/cond/Greater/y", value = dense<0> : tensor<i32>} : (!_tf.control) -> (tensor<i32>, !_tf.control)
# CHECK-NEXT:    %24:2 = "_tf.Const"(%22#1) {device = "/device:TPU_REPLICATED_CORE", dtype = "tfdtype$DT_FLOAT", name = "tpu/tpu/cond/add/y", value = dense<1.000000e+00> : tensor<f32>} : (!_tf.control) -> (tensor<f32>, !_tf.control)
# CHECK-NEXT:    %25:2 = "_tf.Const"(%22#1) {device = "/device:TPU_REPLICATED_CORE", dtype = "tfdtype$DT_FLOAT", name = "tpu/tpu/cond/add_1/y", value = dense<1.000000e+00> : tensor<f32>} : (!_tf.control) -> (tensor<f32>, !_tf.control)
# CHECK-NEXT:    %26:2 = "_tf.Identity"(%21#1) {T = "tfdtype$DT_BOOL", device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/switch_t"} : (tensor<i1>) -> (tensor<i1>, !_tf.control)
# CHECK-NEXT:    %27:2 = "_tf.Identity"(%20#0) {T = "tfdtype$DT_BOOL", device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/pred_id"} : (tensor<i1>) -> (tensor<i1>, !_tf.control)
# CHECK-NEXT:    %28:3 = "_tf.Switch"(%0#0, %27#0) {T = "tfdtype$DT_FLOAT", _class = ["loc:@Placeholder"], device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/add/Switch"} : (tensor<*xf32>, tensor<i1>) -> (tensor<*xf32>, tensor<*xf32>, !_tf.control)
# CHECK-NEXT:    %29:2 = "_tf.Add"(%28#0, %24#0) {T = "tfdtype$DT_FLOAT", device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/add"} : (tensor<*xf32>, tensor<f32>) -> (tensor<*xf32>, !_tf.control)
# CHECK-NEXT:    %30:3 = "_tf.Switch"(%18#0, %27#0) {T = "tfdtype$DT_BOOL", _class = ["loc:@tpu/tpu/LessEqual"], device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/cond/Select/Switch"} : (tensor<1xi1>, tensor<i1>) -> (tensor<1xi1>, tensor<1xi1>, !_tf.control)
# CHECK-NEXT:    %31:2 = "_tf.Min"(%17#0, %5#0) {T = "tfdtype$DT_INT32", Tidx = "tfdtype$DT_INT32", device = "/device:TPU_REPLICATED_CORE", keep_dims = false, name = "tpu/tpu/Min"} : (tensor<1xi32>, tensor<1xi32>) -> (tensor<i32>, !_tf.control)
# CHECK-NEXT:    %32:3 = "_tf.Switch"(%31#0, %27#0) {T = "tfdtype$DT_INT32", _class = ["loc:@tpu/tpu/Min"], device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/Greater/Switch"} : (tensor<i32>, tensor<i1>) -> (tensor<i32>, tensor<i32>, !_tf.control)
# CHECK-NEXT:    %33:2 = "_tf.Greater"(%32#0, %23#0) {T = "tfdtype$DT_INT32", device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/Greater"} : (tensor<i32>, tensor<i32>) -> (tensor<i1>, !_tf.control)
# CHECK-NEXT:    %34:3 = "_tf.Switch"(%33#0, %33#0) {T = "tfdtype$DT_BOOL", device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/cond/Switch"} : (tensor<i1>, tensor<i1>) -> (tensor<i1>, tensor<i1>, !_tf.control)
# CHECK-NEXT:    %35:2 = "_tf.Identity"(%34#0) {T = "tfdtype$DT_BOOL", device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/cond/switch_f"} : (tensor<i1>) -> (tensor<i1>, !_tf.control)
# CHECK-NEXT:    %36:2 = "_tf.Identity"(%34#1) {T = "tfdtype$DT_BOOL", device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/cond/switch_t"} : (tensor<i1>) -> (tensor<i1>, !_tf.control)
# CHECK-NEXT:    %37:2 = "_tf.Identity"(%33#0) {T = "tfdtype$DT_BOOL", device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/cond/pred_id"} : (tensor<i1>) -> (tensor<i1>, !_tf.control)
# CHECK-NEXT:    %38:3 = "_tf.Switch"(%30#0, %37#0) {T = "tfdtype$DT_BOOL", _class = ["loc:@tpu/tpu/LessEqual"], device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/cond/Select/Switch_1"} : (tensor<1xi1>, tensor<i1>) -> (tensor<1xi1>, tensor<1xi1>, !_tf.control)
# CHECK-NEXT:    %39:3 = "_tf.Switch"(%29#0, %37#0) {T = "tfdtype$DT_FLOAT", _class = ["loc:@tpu/tpu/cond/add"], device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/cond/Select/Switch_4"} : (tensor<*xf32>, tensor<i1>) -> (tensor<*xf32>, tensor<*xf32>, !_tf.control)
# CHECK-NEXT:    %40:3 = "_tf.Switch"(%29#0, %37#0) {T = "tfdtype$DT_FLOAT", _class = ["loc:@tpu/tpu/cond/add"], device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/cond/Switch_1"} : (tensor<*xf32>, tensor<i1>) -> (tensor<*xf32>, tensor<*xf32>, !_tf.control)
# CHECK-NEXT:    %41:2 = "_tf.Const"() {device = "/device:TPU_REPLICATED_CORE", dtype = "tfdtype$DT_INT32", name = "tpu/tpu/strided_slice/stack", value = dense<0> : tensor<1xi32>} : () -> (tensor<1xi32>, !_tf.control)
# CHECK-NEXT:    %42:2 = "_tf.Const"() {device = "/device:TPU_REPLICATED_CORE", dtype = "tfdtype$DT_INT32", name = "tpu/tpu/strided_slice/stack_1", value = dense<1> : tensor<1xi32>} : () -> (tensor<1xi32>, !_tf.control)
# CHECK-NEXT:    %43:2 = "_tf.Const"() {device = "/device:TPU_REPLICATED_CORE", dtype = "tfdtype$DT_INT32", name = "tpu/tpu/strided_slice/stack_2", value = dense<1> : tensor<1xi32>} : () -> (tensor<1xi32>, !_tf.control)
# CHECK-NEXT:    %44:2 = "_tf.StridedSlice"(%1#0, %41#0, %42#0, %43#0) {Index = "tfdtype$DT_INT32", T = "tfdtype$DT_INT32", begin_mask = 0 : i64, device = "/device:TPU_REPLICATED_CORE", ellipsis_mask = 0 : i64, end_mask = 0 : i64, name = "tpu/tpu/strided_slice", new_axis_mask = 0 : i64, shrink_axis_mask = 1 : i64} : (tensor<?xi32>, tensor<1xi32>, tensor<1xi32>, tensor<1xi32>) -> (tensor<i32>, !_tf.control)
# CHECK-NEXT:    %45:2 = "_tf.ExpandDims"(%44#0, %7#0) {T = "tfdtype$DT_INT32", Tdim = "tfdtype$DT_INT32", device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/ExpandDims"} : (tensor<i32>, tensor<i32>) -> (tensor<1xi32>, !_tf.control)
# CHECK-NEXT:    %46:2 = "_tf.ConcatV2"(%45#0, %3#0, %16#0) {N = 2 : i64, T = "tfdtype$DT_INT32", Tidx = "tfdtype$DT_INT32", device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/concat"} : (tensor<1xi32>, tensor<1xi32>, tensor<i32>) -> (tensor<2xi32>, !_tf.control)
# CHECK-NEXT:    %47:2 = "_tf.ExpandDims"(%44#0, %12#0) {T = "tfdtype$DT_INT32", Tdim = "tfdtype$DT_INT32", device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/Plus1RNNCellZeroState/ExpandDims"} : (tensor<i32>, tensor<i32>) -> (tensor<1xi32>, !_tf.control)
# CHECK-NEXT:    %48:2 = "_tf.ConcatV2"(%47#0, %10#0, %14#0) {N = 2 : i64, T = "tfdtype$DT_INT32", Tidx = "tfdtype$DT_INT32", device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/Plus1RNNCellZeroState/concat"} : (tensor<1xi32>, tensor<1xi32>, tensor<i32>) -> (tensor<2xi32>, !_tf.control)
# CHECK-NEXT:    %49:2 = "_tf.Fill"(%48#0, %15#0) {T = "tfdtype$DT_FLOAT", device = "/device:TPU_REPLICATED_CORE", index_type = "tfdtype$DT_INT32", name = "tpu/tpu/Plus1RNNCellZeroState/zeros"} : (tensor<2xi32>, tensor<f32>) -> (tensor<?x1xf32>, !_tf.control)
# CHECK-NEXT:    %50:3 = "_tf.Switch"(%49#0, %27#0) {T = "tfdtype$DT_FLOAT", _class = ["loc:@tpu/tpu/Plus1RNNCellZeroState/zeros"], device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/Switch_2"} : (tensor<?x1xf32>, tensor<i1>) -> (tensor<?x1xf32>, tensor<?x1xf32>, !_tf.control)
# CHECK-NEXT:    %51:3 = "_tf.Switch"(%49#0, %27#0) {T = "tfdtype$DT_FLOAT", _class = ["loc:@tpu/tpu/Plus1RNNCellZeroState/zeros"], device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/add_1/Switch"} : (tensor<?x1xf32>, tensor<i1>) -> (tensor<?x1xf32>, tensor<?x1xf32>, !_tf.control)
# CHECK-NEXT:    %52:2 = "_tf.Add"(%51#0, %25#0) {T = "tfdtype$DT_FLOAT", device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/add_1"} : (tensor<?x1xf32>, tensor<f32>) -> (tensor<?x1xf32>, !_tf.control)
# CHECK-NEXT:    %53:3 = "_tf.Switch"(%52#0, %37#0) {T = "tfdtype$DT_FLOAT", _class = ["loc:@tpu/tpu/cond/add_1"], device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/cond/Select_1/Switch_1"} : (tensor<?x1xf32>, tensor<i1>) -> (tensor<?x1xf32>, tensor<?x1xf32>, !_tf.control)
# CHECK-NEXT:    %54:3 = "_tf.Switch"(%52#0, %37#0) {T = "tfdtype$DT_FLOAT", _class = ["loc:@tpu/tpu/cond/add_1"], device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/cond/Switch_2"} : (tensor<?x1xf32>, tensor<i1>) -> (tensor<?x1xf32>, tensor<?x1xf32>, !_tf.control)
# CHECK-NEXT:    %55:3 = "_tf.Switch"(%51#0, %37#0) {T = "tfdtype$DT_FLOAT", _class = ["loc:@tpu/tpu/Plus1RNNCellZeroState/zeros"], device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/cond/Select_1/Switch"} : (tensor<?x1xf32>, tensor<i1>) -> (tensor<?x1xf32>, tensor<?x1xf32>, !_tf.control)
# CHECK-NEXT:    %56:2 = "_tf.Select"(%38#0, %55#0, %53#0) {T = "tfdtype$DT_FLOAT", _class = ["loc:@tpu/tpu/cond/add_1"], device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/cond/Select_1"} : (tensor<1xi1>, tensor<?x1xf32>, tensor<?x1xf32>) -> (tensor<?x1xf32>, !_tf.control)
# CHECK-NEXT:    %57:3 = "_tf.Merge"(%56#0, %54#1) {N = 2 : i64, T = "tfdtype$DT_FLOAT", device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/cond/Merge_1"} : (tensor<?x1xf32>, tensor<?x1xf32>) -> (tensor<?x1xf32>, tensor<i32>, !_tf.control)
# CHECK-NEXT:    %58:3 = "_tf.Merge"(%57#0, %50#1) {N = 2 : i64, T = "tfdtype$DT_FLOAT", device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/Merge_1"} : (tensor<?x1xf32>, tensor<?x1xf32>) -> (tensor<?x1xf32>, tensor<i32>, !_tf.control)
# CHECK-NEXT:    %59:2 = "_tf.Identity"(%58#0) {T = "tfdtype$DT_FLOAT", device = "/device:TPU_REPLICATED_CORE", name = "tpu/Identity_1"} : (tensor<?x1xf32>) -> (tensor<?x1xf32>, !_tf.control)
# CHECK-NEXT:    %60 = "_tf._Retval"(%59#0) {T = "tfdtype$DT_FLOAT", device = "/device:TPU_REPLICATED_CORE:0", index = 1 : i64, name = "tpu_identity_1_0_retval_RetVal"} : (tensor<?x1xf32>) -> !_tf.control
# CHECK-NEXT:    %61:2 = "_tf.ExpandDims"(%44#0, %13#0) {T = "tfdtype$DT_INT32", Tdim = "tfdtype$DT_INT32", device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/Plus1RNNCellZeroState/ExpandDims_1"} : (tensor<i32>, tensor<i32>) -> (tensor<1xi32>, !_tf.control)
# CHECK-NEXT:    %62:2 = "_tf.Const"() {device = "/device:TPU_REPLICATED_CORE", dtype = "tfdtype$DT_FLOAT", name = "tpu/tpu/zeros/Const", value = dense<0.000000e+00> : tensor<f32>} : () -> (tensor<f32>, !_tf.control)
# CHECK-NEXT:    %63:2 = "_tf.Fill"(%46#0, %62#0) {T = "tfdtype$DT_FLOAT", device = "/device:TPU_REPLICATED_CORE", index_type = "tfdtype$DT_INT32", name = "tpu/tpu/zeros"} : (tensor<2xi32>, tensor<f32>) -> (tensor<?x1xf32>, !_tf.control)
# CHECK-NEXT:    %64:3 = "_tf.Switch"(%63#0, %27#0) {T = "tfdtype$DT_FLOAT", _class = ["loc:@tpu/tpu/zeros"], device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/Switch_1"} : (tensor<?x1xf32>, tensor<i1>) -> (tensor<?x1xf32>, tensor<?x1xf32>, !_tf.control)
# CHECK-NEXT:    %65:3 = "_tf.Switch"(%63#0, %27#0) {T = "tfdtype$DT_FLOAT", _class = ["loc:@tpu/tpu/zeros"], device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/cond/Select/Switch_2"} : (tensor<?x1xf32>, tensor<i1>) -> (tensor<?x1xf32>, tensor<?x1xf32>, !_tf.control)
# CHECK-NEXT:    %66:3 = "_tf.Switch"(%65#0, %37#0) {T = "tfdtype$DT_FLOAT", _class = ["loc:@tpu/tpu/zeros"], device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/cond/Select/Switch_3"} : (tensor<?x1xf32>, tensor<i1>) -> (tensor<?x1xf32>, tensor<?x1xf32>, !_tf.control)
# CHECK-NEXT:    %67:2 = "_tf.Select"(%38#0, %66#0, %39#0) {T = "tfdtype$DT_FLOAT", _class = ["loc:@tpu/tpu/cond/add"], device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/cond/Select"} : (tensor<1xi1>, tensor<?x1xf32>, tensor<*xf32>) -> (tensor<?x1xf32>, !_tf.control)
# CHECK-NEXT:    %68:3 = "_tf.Merge"(%67#0, %40#1) {N = 2 : i64, T = "tfdtype$DT_FLOAT", device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/cond/Merge"} : (tensor<?x1xf32>, tensor<*xf32>) -> (tensor<*xf32>, tensor<i32>, !_tf.control)
# CHECK-NEXT:    %69:3 = "_tf.Merge"(%68#0, %64#1) {N = 2 : i64, T = "tfdtype$DT_FLOAT", device = "/device:TPU_REPLICATED_CORE", name = "tpu/tpu/cond/Merge"} : (tensor<*xf32>, tensor<?x1xf32>) -> (tensor<*xf32>, tensor<i32>, !_tf.control)
# CHECK-NEXT:    %70:2 = "_tf.Pack"(%69#0) {N = 1 : i64, T = "tfdtype$DT_FLOAT", axis = 0 : i64, device = "/device:TPU_REPLICATED_CORE:0", name = "tpu/packed"} : (tensor<*xf32>) -> (tensor<*xf32>, !_tf.control)
# CHECK-NEXT:    %71:2 = "_tf.Identity"(%70#0) {T = "tfdtype$DT_FLOAT", device = "/device:TPU_REPLICATED_CORE:0", name = "tpu/Identity"} : (tensor<*xf32>) -> (tensor<*xf32>, !_tf.control)
# CHECK-NEXT:    %72 = "_tf._Retval"(%71#0) {T = "tfdtype$DT_FLOAT", device = "/device:TPU_REPLICATED_CORE:0", index = 0 : i64, name = "tpu_identity_0_retval_RetVal"} : (tensor<*xf32>) -> !_tf.control
# CHECK-NEXT:    return
# CHECK-NEXT:  }
