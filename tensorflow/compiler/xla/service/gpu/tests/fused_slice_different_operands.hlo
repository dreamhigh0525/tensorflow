// RUN: hlo_to_llvm_ir %s | FileCheck %s

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK-LABEL: entry:
// CHECK:         %[[VAL_0:.*]] = getelementptr inbounds i8, i8* %[[VAL_1:.*]], i64 0
// CHECK:         %[[VAL_2:.*]] = bitcast i8* %[[VAL_0]] to [1024 x half]*
// CHECK:         %[[VAL_3:.*]] = getelementptr inbounds i8, i8* %[[VAL_4:.*]], i64 0
// CHECK:         %[[VAL_5:.*]] = bitcast i8* %[[VAL_3]] to [1024 x half]*
// CHECK:         %[[VAL_6:.*]] = getelementptr inbounds i8, i8* %[[VAL_7:.*]], i64 0
// CHECK:         %[[VAL_8:.*]] = bitcast i8* %[[VAL_6]] to [1023 x half]*
// CHECK:         %[[VAL_9:.*]] = getelementptr inbounds i8, i8* %[[VAL_10:.*]], i64 0
// CHECK:         %[[VAL_11:.*]] = bitcast i8* %[[VAL_9]] to [1023 x half]*
// CHECK:         %[[VAL_12:.*]] = getelementptr inbounds i8, i8* %[[VAL_13:.*]], i64 0
// CHECK:         %[[VAL_14:.*]] = bitcast i8* %[[VAL_12]] to [1024 x half]*
// CHECK:         %[[VAL_15:.*]] = getelementptr inbounds i8, i8* %[[VAL_16:.*]], i64 0
// CHECK:         %[[VAL_17:.*]] = bitcast i8* %[[VAL_15]] to [1024 x half]*
// CHECK:         ret void
// CHECK:       entry:
// CHECK:         %[[VAL_18:.*]] = getelementptr inbounds i8, i8* %[[VAL_19:.*]], i64 0
// CHECK:         %[[VAL_20:.*]] = bitcast i8* %[[VAL_18]] to [1024 x half]*
// CHECK:         %[[VAL_21:.*]] = getelementptr inbounds i8, i8* %[[VAL_22:.*]], i64 0
// CHECK:         %[[VAL_23:.*]] = bitcast i8* %[[VAL_21]] to [1024 x half]*
// CHECK:         %[[VAL_24:.*]] = getelementptr inbounds i8, i8* %[[VAL_25:.*]], i64 0
// CHECK:         %[[VAL_26:.*]] = bitcast i8* %[[VAL_24]] to [1023 x half]*
// CHECK:         %[[VAL_27:.*]] = getelementptr inbounds i8, i8* %[[VAL_28:.*]], i64 0
// CHECK:         %[[VAL_29:.*]] = bitcast i8* %[[VAL_27]] to [1023 x half]*
// CHECK:         %[[VAL_30:.*]] = getelementptr inbounds i8, i8* %[[VAL_31:.*]], i64 0
// CHECK:         %[[VAL_32:.*]] = bitcast i8* %[[VAL_30]] to [1024 x half]*
// CHECK:         %[[VAL_33:.*]] = getelementptr inbounds i8, i8* %[[VAL_34:.*]], i64 0
// CHECK:         %[[VAL_35:.*]] = bitcast i8* %[[VAL_33]] to [1024 x half]*
// CHECK:         %[[VAL_36:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !3
// CHECK:         %[[VAL_37:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !4
// CHECK:         %[[VAL_38:.*]] = mul nuw nsw i32 %[[VAL_36]], 1024
// CHECK:         %[[VAL_39:.*]] = add nuw nsw i32 %[[VAL_38]], %[[VAL_37]]
// CHECK:         %[[VAL_40:.*]] = icmp ult i32 %[[VAL_39]], 1024
// CHECK:         call void @llvm.assume(i1 %[[VAL_40]])
// CHECK:         %[[VAL_41:.*]] = udiv i32 %[[VAL_39]], 1
// CHECK:         %[[VAL_42:.*]] = icmp ult i32 %[[VAL_39]], 1024
// CHECK:         br i1 %[[VAL_42]], label %[[VAL_43:.*]], label %[[VAL_44:.*]]
// CHECK:       fusion.in_bounds-after:                           ; preds = %[[VAL_45:.*]], %[[VAL_46:.*]]
// CHECK:         ret void
// CHECK:       fusion.in_bounds-true:                            ; preds = %[[VAL_46]]
// CHECK:         %[[VAL_47:.*]] = add i32 %[[VAL_41]], 0
// CHECK:         %[[VAL_48:.*]] = icmp ult i32 %[[VAL_47]], 1024
// CHECK:         br i1 %[[VAL_48]], label %[[VAL_49:.*]], label %[[VAL_50:.*]]
// CHECK:       concat_index_from_operand_id0:                    ; preds = %[[VAL_43]]
// CHECK:         %[[VAL_51:.*]] = phi i32 [ 0, %[[VAL_43]] ]
// CHECK:         %[[VAL_52:.*]] = sub nsw i32 %[[VAL_47]], %[[VAL_51]]
// CHECK:         %[[VAL_53:.*]] = getelementptr inbounds [1024 x half], [1024 x half]* %[[VAL_20]], i32 0, i32 %[[VAL_52]]
// CHECK:         %[[VAL_54:.*]] = load half, half* %[[VAL_53]], align 2, !invariant.load !5
// CHECK:         %[[VAL_55:.*]] = getelementptr inbounds [1024 x half], [1024 x half]* %[[VAL_23]], i32 0, i32 %[[VAL_52]]
// CHECK:         %[[VAL_56:.*]] = load half, half* %[[VAL_55]], align 2, !invariant.load !5
// CHECK:         %[[VAL_57:.*]] = fmul half %[[VAL_54]], %[[VAL_56]]
// CHECK:         br label %[[VAL_45]]
// CHECK:       concat_index_from_operand_id1:                    ; preds = %[[VAL_50]]
// CHECK:         %[[VAL_58:.*]] = phi i32 [ 1024, %[[VAL_50]] ]
// CHECK:         %[[VAL_59:.*]] = sub nsw i32 %[[VAL_47]], %[[VAL_58]]
// CHECK:         %[[VAL_60:.*]] = getelementptr inbounds [1023 x half], [1023 x half]* %[[VAL_26]], i32 0, i32 %[[VAL_59]]
// CHECK:         %[[VAL_61:.*]] = load half, half* %[[VAL_60]], align 2, !invariant.load !5
// CHECK:         %[[VAL_62:.*]] = getelementptr inbounds [1023 x half], [1023 x half]* %[[VAL_29]], i32 0, i32 %[[VAL_59]]
// CHECK:         %[[VAL_63:.*]] = load half, half* %[[VAL_62]], align 2, !invariant.load !5
// CHECK:         %[[VAL_64:.*]] = fadd half %[[VAL_61]], %[[VAL_63]]
// CHECK:         br label %[[VAL_45]]
// CHECK:       concat_index_not_from_operand0:                   ; preds = %[[VAL_43]]
// CHECK:         %[[VAL_65:.*]] = icmp ult i32 %[[VAL_47]], 2047
// CHECK:         br i1 %[[VAL_65]], label %[[VAL_66:.*]], label %[[VAL_67:.*]]
// CHECK:       concat_index_not_from_operand1:                   ; preds = %[[VAL_50]]
// CHECK:         unreachable
// CHECK:       concatenate.7.merge:                              ; preds = %[[VAL_66]], %[[VAL_49]]
// CHECK:         %[[VAL_68:.*]] = phi half [ %[[VAL_57]], %[[VAL_49]] ], [ %[[VAL_64]], %[[VAL_66]] ]
// CHECK:         %[[VAL_69:.*]] = insertvalue { half, half } undef, half %[[VAL_68]], 0
// CHECK:         %[[VAL_70:.*]] = add i32 %[[VAL_41]], 0
// CHECK:         %[[VAL_71:.*]] = getelementptr inbounds [1024 x half], [1024 x half]* %[[VAL_20]], i32 0, i32 %[[VAL_70]]
// CHECK:         %[[VAL_72:.*]] = load half, half* %[[VAL_71]], align 2, !invariant.load !5
// CHECK:         %[[VAL_73:.*]] = getelementptr inbounds [1024 x half], [1024 x half]* %[[VAL_23]], i32 0, i32 %[[VAL_70]]
// CHECK:         %[[VAL_74:.*]] = load half, half* %[[VAL_73]], align 2, !invariant.load !5
// CHECK:         %[[VAL_75:.*]] = fmul half %[[VAL_72]], %[[VAL_74]]
// CHECK:         %[[VAL_76:.*]] = insertvalue { half, half } %[[VAL_69]], half %[[VAL_75]], 1
// CHECK:         %[[VAL_77:.*]] = extractvalue { half, half } %[[VAL_76]], 0
// CHECK:         %[[VAL_78:.*]] = bitcast [1024 x half]* %[[VAL_32]] to half*
// CHECK:         %[[VAL_79:.*]] = getelementptr inbounds half, half* %[[VAL_78]], i32 %[[VAL_39]]
// CHECK:         store half %[[VAL_77]], half* %[[VAL_79]], align 2
// CHECK:         %[[VAL_80:.*]] = extractvalue { half, half } %[[VAL_76]], 1
// CHECK:         %[[VAL_81:.*]] = bitcast [1024 x half]* %[[VAL_35]] to half*
// CHECK:         %[[VAL_82:.*]] = getelementptr inbounds half, half* %[[VAL_81]], i32 %[[VAL_39]]
// CHECK:         store half %[[VAL_80]], half* %[[VAL_82]], align 2
// CHECK:         br label %[[VAL_44]]

HloModule input_fusion_with_a_tuple_of_slices

fused_computation {
  arg.1 = f16[1024]{0} parameter(0)
  arg.2 = f16[1024]{0} parameter(1)
  arg.3 = f16[1023]{0} parameter(2)
  arg.4 = f16[1023]{0} parameter(3)
  mul.1 = f16[1024]{0} multiply(arg.1, arg.2)
  add.1 = f16[1023]{0} add(arg.3, arg.4)
  concat.1 = f16[2047]{0} concatenate(mul.1, add.1), dimensions={0}
  slice.1 = f16[1024]{0} slice(concat.1), slice={[0:1024]}
  slice.2 = f16[1024]{0} slice(mul.1), slice={[0:1024]}
  ROOT tuple.1 = (f16[1024]{0}, f16[1024]{0}) tuple(slice.1, slice.2)
}

ENTRY kernel_entry {
  arg.1 = f16[1024]{0} parameter(0)
  arg.2 = f16[1024]{0} parameter(1)
  arg.3 = f16[1023]{0} parameter(2)
  arg.4 = f16[1023]{0} parameter(3)
  ROOT fusion = (f16[1024]{0}, f16[1024]{0})
      fusion(arg.1, arg.2, arg.3, arg.4), kind=kLoop, calls=fused_computation
}
