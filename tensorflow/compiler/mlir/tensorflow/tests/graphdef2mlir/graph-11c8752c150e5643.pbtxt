# RUN: tf-mlir-translate -graphdef-to-mlir %s -o - | FileCheck %s

node {
  name: "Empty/shape"
  op: "Const"
  device: "/job:localhost/replica:0/task:0/device:TPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "Empty"
  op: "Empty"
  input: "Empty/shape"
  device: "/job:localhost/replica:0/task:0/device:TPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_BFLOAT16
    }
  }
  attr {
    key: "init"
    value {
      b: false
    }
  }
}
node {
  name: "Empty/_0"
  op: "_Send"
  input: "Empty"
  device: "/job:localhost/replica:0/task:0/device:TPU:0"
  attr {
    key: "T"
    value {
      type: DT_BFLOAT16
    }
  }
  attr {
    key: "client_terminated"
    value {
      b: false
    }
  }
  attr {
    key: "recv_device"
    value {
      s: "/job:localhost/replica:0/task:0/device:CPU:0"
    }
  }
  attr {
    key: "send_device"
    value {
      s: "/job:localhost/replica:0/task:0/device:TPU:0"
    }
  }
  attr {
    key: "send_device_incarnation"
    value {
      i: 1
    }
  }
  attr {
    key: "tensor_name"
    value {
      s: "edge_5_Empty"
    }
  }
}
library {
}
versions {
  producer: 26
}

# CHECK:       func @main() {
# CHECK-NEXT:    %0:2 = "_tf.Const"() {device = "/job:localhost/replica:0/task:0/device:TPU:0", dtype = "tfdtype$DT_INT32", name = "Empty/shape", value = dense<128> : tensor<2xi32>} : () -> (tensor<2xi32>, !_tf.control)
# CHECK-NEXT:    %1:2 = "_tf.Empty"(%0#0) {device = "/job:localhost/replica:0/task:0/device:TPU:0", dtype = "tfdtype$DT_BFLOAT16", init = false, name = "Empty"} : (tensor<2xi32>) -> (tensor<128x128xbf16>, !_tf.control)
# CHECK-NEXT:    %2 = "_tf._Send"(%1#0) {T = "tfdtype$DT_BFLOAT16", client_terminated = false, device = "/job:localhost/replica:0/task:0/device:TPU:0", name = "Empty/_0", recv_device = "/job:localhost/replica:0/task:0/device:CPU:0", send_device = "/job:localhost/replica:0/task:0/device:TPU:0", send_device_incarnation = 1 : i64, tensor_name = "edge_5_Empty"} : (tensor<128x128xbf16>) -> !_tf.control
# CHECK-NEXT:    return
# CHECK-NEXT:  }
