/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/
#include "tensorflow/lite/kernels/transpose_test_utils.h"

#include <vector>

#include <gmock/gmock.h>
#include <gtest/gtest.h>

using testing::ElementsAreArray;

namespace tflite {
namespace {

TEST(TransposeTest, TestRefOps1D) {
  // Basic 1D identity.
  EXPECT_THAT(RunTestPermutation<float>({3}, {0}), ElementsAreArray({0, 1, 2}));
}

TEST(TransposeTest, TestRefOps2D) {
  // Basic 2D.
  EXPECT_THAT(RunTestPermutation<float>({3, 2}, {1, 0}),
              ElementsAreArray({0, 2, 4, 1, 3, 5}));
  // Identity.
  EXPECT_THAT(RunTestPermutation<float>({3, 2}, {0, 1}),
              ElementsAreArray({0, 1, 2, 3, 4, 5}));
}

TEST(TransposeTest, TestRefOps3D) {
  {
    EXPECT_THAT(
        RunTestPermutation<float>(/*shape=*/{2, 3, 4}, /*perms=*/{2, 0, 1}),
        ElementsAreArray({0, 4, 8,  12, 16, 20, 1, 5, 9,  13, 17, 21,
                          2, 6, 10, 14, 18, 22, 3, 7, 11, 15, 19, 23}));
  }

  // Test 3 dimensional identity transform
  {
    std::vector<float> out =
        RunTestPermutation<float>(/*shape=*/{2, 3, 4}, /*perms=*/{0, 1, 2});
    std::vector<float> ref(out.size());
    absl::c_iota(ref, 0);
    EXPECT_THAT(out, ElementsAreArray(ref));
  }

  /**
   * Additional tests that mimic first case, but with different perm.
   */
  {
    EXPECT_THAT(
        RunTestPermutation<float>(/*shape=*/{2, 3, 4}, /*perms=*/{1, 2, 0}),
        ElementsAreArray({0, 12, 1, 13, 2, 14, 3, 15, 4,  16, 5,  17,
                          6, 18, 7, 19, 8, 20, 9, 21, 10, 22, 11, 23}));
  }

  {
    EXPECT_THAT(
        RunTestPermutation<float>(/*shape=*/{2, 3, 4}, /*perms=*/{0, 2, 1}),
        ElementsAreArray({0,  4,  8,  1,  5,  9,  2,  6,  10, 3,  7,  11,
                          12, 16, 20, 13, 17, 21, 14, 18, 22, 15, 19, 23}));
  }

  {
    EXPECT_THAT(
        RunTestPermutation<float>(/*shape=*/{2, 3, 4}, /*perms=*/{1, 0, 2}),
        ElementsAreArray({0,  1,  2,  3,  12, 13, 14, 15, 4,  5,  6,  7,
                          16, 17, 18, 19, 8,  9,  10, 11, 20, 21, 22, 23}));
  }

  {
    EXPECT_THAT(
        RunTestPermutation<float>(/*shape=*/{2, 3, 4}, /*perms=*/{2, 1, 0}),
        ElementsAreArray({0, 12, 4, 16, 8,  20, 1, 13, 5, 17, 9,  21,
                          2, 14, 6, 18, 10, 22, 3, 15, 7, 19, 11, 23}));
  }
}

TEST(TransposeTest, TestRefOps3D_OneInDimension) {
  // Shape with 1 as first dim -> transposed.
  {
    EXPECT_THAT(
        RunTestPermutation<float>(/*shape=*/{1, 2, 3}, /*perms=*/{2, 0, 1}),
        ElementsAreArray({0, 3, 1, 4, 2, 5}));
  }
  // Shape with 1 as first dim -> identity.
  {
    EXPECT_THAT(
        RunTestPermutation<float>(/*shape=*/{1, 2, 3}, /*perms=*/{1, 2, 0}),
        ElementsAreArray({0, 1, 2, 3, 4, 5}));
  }
  // Shape with 1 as third dim -> transposed.
  {
    EXPECT_THAT(
        RunTestPermutation<float>(/*shape=*/{2, 3, 1}, /*perms=*/{1, 2, 0}),
        ElementsAreArray({0, 3, 1, 4, 2, 5}));
  }
  // Shape with 1 as third dim -> identity.
  {
    EXPECT_THAT(
        RunTestPermutation<float>(/*shape=*/{2, 3, 1}, /*perms=*/{2, 0, 1}),
        ElementsAreArray({0, 1, 2, 3, 4, 5}));
  }
}

template <typename T>
void TransposeTestTestRefOps4D() {
  // Basic 4d.
  EXPECT_THAT(
      RunTestPermutation<T>({2, 3, 4, 5}, {2, 0, 1, 3}),
      ElementsAreArray(
          {0,  1,  2,  3,  4,  20, 21, 22, 23, 24, 40,  41,  42,  43,  44,
           60, 61, 62, 63, 64, 80, 81, 82, 83, 84, 100, 101, 102, 103, 104,
           5,  6,  7,  8,  9,  25, 26, 27, 28, 29, 45,  46,  47,  48,  49,
           65, 66, 67, 68, 69, 85, 86, 87, 88, 89, 105, 106, 107, 108, 109,
           10, 11, 12, 13, 14, 30, 31, 32, 33, 34, 50,  51,  52,  53,  54,
           70, 71, 72, 73, 74, 90, 91, 92, 93, 94, 110, 111, 112, 113, 114,
           15, 16, 17, 18, 19, 35, 36, 37, 38, 39, 55,  56,  57,  58,  59,
           75, 76, 77, 78, 79, 95, 96, 97, 98, 99, 115, 116, 117, 118, 119}));
  {
    // Basic identity.
    std::vector<T> out = RunTestPermutation<T>({2, 3, 4, 5}, {0, 1, 2, 3});
    std::vector<T> ref(out.size());
    absl::c_iota(ref, 0);
    EXPECT_THAT(out, ElementsAreArray(ref));
  }
}

TEST(TransposeTest, TestRefOps4D) { TransposeTestTestRefOps4D<float>(); }

TEST(TransposeTest, TestRefOps4DInt8) { TransposeTestTestRefOps4D<int8_t>(); }

TEST(TransposeTest, TestRefOps4DInt16) { TransposeTestTestRefOps4D<int16_t>(); }

TEST(TransposeTest, TestRefOps1D0) {
  EXPECT_THAT(RunTestPermutation<float>(/*shape=*/{2}, /*perms=*/{0}),
              ElementsAreArray({0, 1}));
}

TEST(TransposeTest, TestRefOps2D0) {
  EXPECT_THAT(RunTestPermutation<float>(/*shape=*/{2, 3}, /*perms=*/{0, 1}),
              ElementsAreArray({0, 1, 2, 3, 4, 5}));
}

TEST(TransposeTest, TestRefOps2D1) {
  EXPECT_THAT(RunTestPermutation<float>(/*shape=*/{2, 3}, /*perms=*/{1, 0}),
              ElementsAreArray({0, 3, 1, 4, 2, 5}));
}

TEST(TransposeTest, TestRefOps3D0) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4}, /*perms=*/{0, 1, 2}),
      ElementsAreArray({0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11,
                        12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23}));
}

TEST(TransposeTest, TestRefOps3D1) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4}, /*perms=*/{0, 2, 1}),
      ElementsAreArray({0,  4,  8,  1,  5,  9,  2,  6,  10, 3,  7,  11,
                        12, 16, 20, 13, 17, 21, 14, 18, 22, 15, 19, 23}));
}

TEST(TransposeTest, TestRefOps3D2) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4}, /*perms=*/{1, 0, 2}),
      ElementsAreArray({0,  1,  2,  3,  12, 13, 14, 15, 4,  5,  6,  7,
                        16, 17, 18, 19, 8,  9,  10, 11, 20, 21, 22, 23}));
}

TEST(TransposeTest, TestRefOps3D3) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4}, /*perms=*/{1, 2, 0}),
      ElementsAreArray({0, 12, 1, 13, 2, 14, 3, 15, 4,  16, 5,  17,
                        6, 18, 7, 19, 8, 20, 9, 21, 10, 22, 11, 23}));
}

TEST(TransposeTest, TestRefOps3D4) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4}, /*perms=*/{2, 0, 1}),
      ElementsAreArray({0, 4, 8,  12, 16, 20, 1, 5, 9,  13, 17, 21,
                        2, 6, 10, 14, 18, 22, 3, 7, 11, 15, 19, 23}));
}

TEST(TransposeTest, TestRefOps3D5) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4}, /*perms=*/{2, 1, 0}),
      ElementsAreArray({0, 12, 4, 16, 8,  20, 1, 13, 5, 17, 9,  21,
                        2, 14, 6, 18, 10, 22, 3, 15, 7, 19, 11, 23}));
}

TEST(TransposeTest, TestRefOps4D0) {
  const std::vector<float> ref = [] {
    std::vector<float> ref(120);
    absl::c_iota(ref, 0);
    return ref;
  }();
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5}, /*perms=*/{0, 1, 2, 3}),
      ElementsAreArray(ref));
}

TEST(TransposeTest, TestRefOps4D1) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5}, /*perms=*/{0, 1, 3, 2}),
      ElementsAreArray(
          {0,   5,   10,  15,  1,   6,   11,  16,  2,   7,   12,  17,  3,   8,
           13,  18,  4,   9,   14,  19,  20,  25,  30,  35,  21,  26,  31,  36,
           22,  27,  32,  37,  23,  28,  33,  38,  24,  29,  34,  39,  40,  45,
           50,  55,  41,  46,  51,  56,  42,  47,  52,  57,  43,  48,  53,  58,
           44,  49,  54,  59,  60,  65,  70,  75,  61,  66,  71,  76,  62,  67,
           72,  77,  63,  68,  73,  78,  64,  69,  74,  79,  80,  85,  90,  95,
           81,  86,  91,  96,  82,  87,  92,  97,  83,  88,  93,  98,  84,  89,
           94,  99,  100, 105, 110, 115, 101, 106, 111, 116, 102, 107, 112, 117,
           103, 108, 113, 118, 104, 109, 114, 119}));
}

TEST(TransposeTest, TestRefOps4D2) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5}, /*perms=*/{0, 2, 1, 3}),
      ElementsAreArray(
          {0,  1,  2,  3,  4,  20, 21, 22, 23, 24, 40,  41,  42,  43,  44,
           5,  6,  7,  8,  9,  25, 26, 27, 28, 29, 45,  46,  47,  48,  49,
           10, 11, 12, 13, 14, 30, 31, 32, 33, 34, 50,  51,  52,  53,  54,
           15, 16, 17, 18, 19, 35, 36, 37, 38, 39, 55,  56,  57,  58,  59,
           60, 61, 62, 63, 64, 80, 81, 82, 83, 84, 100, 101, 102, 103, 104,
           65, 66, 67, 68, 69, 85, 86, 87, 88, 89, 105, 106, 107, 108, 109,
           70, 71, 72, 73, 74, 90, 91, 92, 93, 94, 110, 111, 112, 113, 114,
           75, 76, 77, 78, 79, 95, 96, 97, 98, 99, 115, 116, 117, 118, 119}));
}

TEST(TransposeTest, TestRefOps4D3) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5}, /*perms=*/{0, 2, 3, 1}),
      ElementsAreArray(
          {0,  20, 40,  1,  21, 41,  2,  22, 42,  3,  23, 43,  4,  24, 44,
           5,  25, 45,  6,  26, 46,  7,  27, 47,  8,  28, 48,  9,  29, 49,
           10, 30, 50,  11, 31, 51,  12, 32, 52,  13, 33, 53,  14, 34, 54,
           15, 35, 55,  16, 36, 56,  17, 37, 57,  18, 38, 58,  19, 39, 59,
           60, 80, 100, 61, 81, 101, 62, 82, 102, 63, 83, 103, 64, 84, 104,
           65, 85, 105, 66, 86, 106, 67, 87, 107, 68, 88, 108, 69, 89, 109,
           70, 90, 110, 71, 91, 111, 72, 92, 112, 73, 93, 113, 74, 94, 114,
           75, 95, 115, 76, 96, 116, 77, 97, 117, 78, 98, 118, 79, 99, 119}));
}

TEST(TransposeTest, TestRefOps4D4) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5}, /*perms=*/{0, 3, 1, 2}),
      ElementsAreArray({0,  5,  10, 15, 20, 25, 30, 35, 40,  45,  50,  55,
                        1,  6,  11, 16, 21, 26, 31, 36, 41,  46,  51,  56,
                        2,  7,  12, 17, 22, 27, 32, 37, 42,  47,  52,  57,
                        3,  8,  13, 18, 23, 28, 33, 38, 43,  48,  53,  58,
                        4,  9,  14, 19, 24, 29, 34, 39, 44,  49,  54,  59,
                        60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115,
                        61, 66, 71, 76, 81, 86, 91, 96, 101, 106, 111, 116,
                        62, 67, 72, 77, 82, 87, 92, 97, 102, 107, 112, 117,
                        63, 68, 73, 78, 83, 88, 93, 98, 103, 108, 113, 118,
                        64, 69, 74, 79, 84, 89, 94, 99, 104, 109, 114, 119}));
}

TEST(TransposeTest, TestRefOps4D5) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5}, /*perms=*/{0, 3, 2, 1}),
      ElementsAreArray(
          {0,  20, 40,  5,  25, 45,  10, 30, 50,  15, 35, 55,  1,  21, 41,
           6,  26, 46,  11, 31, 51,  16, 36, 56,  2,  22, 42,  7,  27, 47,
           12, 32, 52,  17, 37, 57,  3,  23, 43,  8,  28, 48,  13, 33, 53,
           18, 38, 58,  4,  24, 44,  9,  29, 49,  14, 34, 54,  19, 39, 59,
           60, 80, 100, 65, 85, 105, 70, 90, 110, 75, 95, 115, 61, 81, 101,
           66, 86, 106, 71, 91, 111, 76, 96, 116, 62, 82, 102, 67, 87, 107,
           72, 92, 112, 77, 97, 117, 63, 83, 103, 68, 88, 108, 73, 93, 113,
           78, 98, 118, 64, 84, 104, 69, 89, 109, 74, 94, 114, 79, 99, 119}));
}

TEST(TransposeTest, TestRefOps4D6) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5}, /*perms=*/{1, 0, 2, 3}),
      ElementsAreArray(
          {0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,
           14,  15,  16,  17,  18,  19,  60,  61,  62,  63,  64,  65,  66,  67,
           68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  20,  21,
           22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,
           36,  37,  38,  39,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,
           90,  91,  92,  93,  94,  95,  96,  97,  98,  99,  40,  41,  42,  43,
           44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,
           58,  59,  100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
           112, 113, 114, 115, 116, 117, 118, 119}));
}

TEST(TransposeTest, TestRefOps4D7) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5}, /*perms=*/{1, 0, 3, 2}),
      ElementsAreArray(
          {0,   5,   10,  15,  1,   6,   11,  16,  2,   7,   12,  17,  3,   8,
           13,  18,  4,   9,   14,  19,  60,  65,  70,  75,  61,  66,  71,  76,
           62,  67,  72,  77,  63,  68,  73,  78,  64,  69,  74,  79,  20,  25,
           30,  35,  21,  26,  31,  36,  22,  27,  32,  37,  23,  28,  33,  38,
           24,  29,  34,  39,  80,  85,  90,  95,  81,  86,  91,  96,  82,  87,
           92,  97,  83,  88,  93,  98,  84,  89,  94,  99,  40,  45,  50,  55,
           41,  46,  51,  56,  42,  47,  52,  57,  43,  48,  53,  58,  44,  49,
           54,  59,  100, 105, 110, 115, 101, 106, 111, 116, 102, 107, 112, 117,
           103, 108, 113, 118, 104, 109, 114, 119}));
}

TEST(TransposeTest, TestRefOps4D8) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5}, /*perms=*/{1, 2, 0, 3}),
      ElementsAreArray(
          {0,   1,   2,   3,   4,   60,  61,  62,  63,  64,  5,   6,   7,   8,
           9,   65,  66,  67,  68,  69,  10,  11,  12,  13,  14,  70,  71,  72,
           73,  74,  15,  16,  17,  18,  19,  75,  76,  77,  78,  79,  20,  21,
           22,  23,  24,  80,  81,  82,  83,  84,  25,  26,  27,  28,  29,  85,
           86,  87,  88,  89,  30,  31,  32,  33,  34,  90,  91,  92,  93,  94,
           35,  36,  37,  38,  39,  95,  96,  97,  98,  99,  40,  41,  42,  43,
           44,  100, 101, 102, 103, 104, 45,  46,  47,  48,  49,  105, 106, 107,
           108, 109, 50,  51,  52,  53,  54,  110, 111, 112, 113, 114, 55,  56,
           57,  58,  59,  115, 116, 117, 118, 119}));
}

TEST(TransposeTest, TestRefOps4D9) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5}, /*perms=*/{1, 2, 3, 0}),
      ElementsAreArray({0,  60,  1,  61,  2,  62,  3,  63,  4,  64,  5,  65,
                        6,  66,  7,  67,  8,  68,  9,  69,  10, 70,  11, 71,
                        12, 72,  13, 73,  14, 74,  15, 75,  16, 76,  17, 77,
                        18, 78,  19, 79,  20, 80,  21, 81,  22, 82,  23, 83,
                        24, 84,  25, 85,  26, 86,  27, 87,  28, 88,  29, 89,
                        30, 90,  31, 91,  32, 92,  33, 93,  34, 94,  35, 95,
                        36, 96,  37, 97,  38, 98,  39, 99,  40, 100, 41, 101,
                        42, 102, 43, 103, 44, 104, 45, 105, 46, 106, 47, 107,
                        48, 108, 49, 109, 50, 110, 51, 111, 52, 112, 53, 113,
                        54, 114, 55, 115, 56, 116, 57, 117, 58, 118, 59, 119}));
}

TEST(TransposeTest, TestRefOps4D10) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5}, /*perms=*/{1, 3, 0, 2}),
      ElementsAreArray(
          {0,   5,   10,  15,  60,  65,  70,  75, 1,   6,   11,  16,  61,  66,
           71,  76,  2,   7,   12,  17,  62,  67, 72,  77,  3,   8,   13,  18,
           63,  68,  73,  78,  4,   9,   14,  19, 64,  69,  74,  79,  20,  25,
           30,  35,  80,  85,  90,  95,  21,  26, 31,  36,  81,  86,  91,  96,
           22,  27,  32,  37,  82,  87,  92,  97, 23,  28,  33,  38,  83,  88,
           93,  98,  24,  29,  34,  39,  84,  89, 94,  99,  40,  45,  50,  55,
           100, 105, 110, 115, 41,  46,  51,  56, 101, 106, 111, 116, 42,  47,
           52,  57,  102, 107, 112, 117, 43,  48, 53,  58,  103, 108, 113, 118,
           44,  49,  54,  59,  104, 109, 114, 119}));
}

TEST(TransposeTest, TestRefOps4D11) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5}, /*perms=*/{1, 3, 2, 0}),
      ElementsAreArray({0,  60,  5,  65,  10, 70,  15, 75,  1,  61,  6,  66,
                        11, 71,  16, 76,  2,  62,  7,  67,  12, 72,  17, 77,
                        3,  63,  8,  68,  13, 73,  18, 78,  4,  64,  9,  69,
                        14, 74,  19, 79,  20, 80,  25, 85,  30, 90,  35, 95,
                        21, 81,  26, 86,  31, 91,  36, 96,  22, 82,  27, 87,
                        32, 92,  37, 97,  23, 83,  28, 88,  33, 93,  38, 98,
                        24, 84,  29, 89,  34, 94,  39, 99,  40, 100, 45, 105,
                        50, 110, 55, 115, 41, 101, 46, 106, 51, 111, 56, 116,
                        42, 102, 47, 107, 52, 112, 57, 117, 43, 103, 48, 108,
                        53, 113, 58, 118, 44, 104, 49, 109, 54, 114, 59, 119}));
}

TEST(TransposeTest, TestRefOps4D12) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5}, /*perms=*/{2, 0, 1, 3}),
      ElementsAreArray(
          {0,  1,  2,  3,  4,  20, 21, 22, 23, 24, 40,  41,  42,  43,  44,
           60, 61, 62, 63, 64, 80, 81, 82, 83, 84, 100, 101, 102, 103, 104,
           5,  6,  7,  8,  9,  25, 26, 27, 28, 29, 45,  46,  47,  48,  49,
           65, 66, 67, 68, 69, 85, 86, 87, 88, 89, 105, 106, 107, 108, 109,
           10, 11, 12, 13, 14, 30, 31, 32, 33, 34, 50,  51,  52,  53,  54,
           70, 71, 72, 73, 74, 90, 91, 92, 93, 94, 110, 111, 112, 113, 114,
           15, 16, 17, 18, 19, 35, 36, 37, 38, 39, 55,  56,  57,  58,  59,
           75, 76, 77, 78, 79, 95, 96, 97, 98, 99, 115, 116, 117, 118, 119}));
}

TEST(TransposeTest, TestRefOps4D13) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5}, /*perms=*/{2, 0, 3, 1}),
      ElementsAreArray(
          {0,  20, 40,  1,  21, 41,  2,  22, 42,  3,  23, 43,  4,  24, 44,
           60, 80, 100, 61, 81, 101, 62, 82, 102, 63, 83, 103, 64, 84, 104,
           5,  25, 45,  6,  26, 46,  7,  27, 47,  8,  28, 48,  9,  29, 49,
           65, 85, 105, 66, 86, 106, 67, 87, 107, 68, 88, 108, 69, 89, 109,
           10, 30, 50,  11, 31, 51,  12, 32, 52,  13, 33, 53,  14, 34, 54,
           70, 90, 110, 71, 91, 111, 72, 92, 112, 73, 93, 113, 74, 94, 114,
           15, 35, 55,  16, 36, 56,  17, 37, 57,  18, 38, 58,  19, 39, 59,
           75, 95, 115, 76, 96, 116, 77, 97, 117, 78, 98, 118, 79, 99, 119}));
}

TEST(TransposeTest, TestRefOps4D14) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5}, /*perms=*/{2, 1, 0, 3}),
      ElementsAreArray(
          {0,  1,  2,  3,  4,  60, 61, 62, 63, 64, 20,  21,  22,  23,  24,
           80, 81, 82, 83, 84, 40, 41, 42, 43, 44, 100, 101, 102, 103, 104,
           5,  6,  7,  8,  9,  65, 66, 67, 68, 69, 25,  26,  27,  28,  29,
           85, 86, 87, 88, 89, 45, 46, 47, 48, 49, 105, 106, 107, 108, 109,
           10, 11, 12, 13, 14, 70, 71, 72, 73, 74, 30,  31,  32,  33,  34,
           90, 91, 92, 93, 94, 50, 51, 52, 53, 54, 110, 111, 112, 113, 114,
           15, 16, 17, 18, 19, 75, 76, 77, 78, 79, 35,  36,  37,  38,  39,
           95, 96, 97, 98, 99, 55, 56, 57, 58, 59, 115, 116, 117, 118, 119}));
}

TEST(TransposeTest, TestRefOps4D15) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5}, /*perms=*/{2, 1, 3, 0}),
      ElementsAreArray(
          {0,  60, 1,  61, 2,  62, 3,   63, 4,   64, 20,  80, 21,  81, 22,
           82, 23, 83, 24, 84, 40, 100, 41, 101, 42, 102, 43, 103, 44, 104,
           5,  65, 6,  66, 7,  67, 8,   68, 9,   69, 25,  85, 26,  86, 27,
           87, 28, 88, 29, 89, 45, 105, 46, 106, 47, 107, 48, 108, 49, 109,
           10, 70, 11, 71, 12, 72, 13,  73, 14,  74, 30,  90, 31,  91, 32,
           92, 33, 93, 34, 94, 50, 110, 51, 111, 52, 112, 53, 113, 54, 114,
           15, 75, 16, 76, 17, 77, 18,  78, 19,  79, 35,  95, 36,  96, 37,
           97, 38, 98, 39, 99, 55, 115, 56, 116, 57, 117, 58, 118, 59, 119}));
}

TEST(TransposeTest, TestRefOps4D16) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5}, /*perms=*/{2, 3, 0, 1}),
      ElementsAreArray(
          {0,  20, 40,  60, 80, 100, 1,  21, 41,  61, 81, 101, 2,  22, 42,
           62, 82, 102, 3,  23, 43,  63, 83, 103, 4,  24, 44,  64, 84, 104,
           5,  25, 45,  65, 85, 105, 6,  26, 46,  66, 86, 106, 7,  27, 47,
           67, 87, 107, 8,  28, 48,  68, 88, 108, 9,  29, 49,  69, 89, 109,
           10, 30, 50,  70, 90, 110, 11, 31, 51,  71, 91, 111, 12, 32, 52,
           72, 92, 112, 13, 33, 53,  73, 93, 113, 14, 34, 54,  74, 94, 114,
           15, 35, 55,  75, 95, 115, 16, 36, 56,  76, 96, 116, 17, 37, 57,
           77, 97, 117, 18, 38, 58,  78, 98, 118, 19, 39, 59,  79, 99, 119}));
}

TEST(TransposeTest, TestRefOps4D17) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5}, /*perms=*/{2, 3, 1, 0}),
      ElementsAreArray(
          {0,  60, 20,  80, 40, 100, 1,  61, 21,  81, 41, 101, 2,  62, 22,
           82, 42, 102, 3,  63, 23,  83, 43, 103, 4,  64, 24,  84, 44, 104,
           5,  65, 25,  85, 45, 105, 6,  66, 26,  86, 46, 106, 7,  67, 27,
           87, 47, 107, 8,  68, 28,  88, 48, 108, 9,  69, 29,  89, 49, 109,
           10, 70, 30,  90, 50, 110, 11, 71, 31,  91, 51, 111, 12, 72, 32,
           92, 52, 112, 13, 73, 33,  93, 53, 113, 14, 74, 34,  94, 54, 114,
           15, 75, 35,  95, 55, 115, 16, 76, 36,  96, 56, 116, 17, 77, 37,
           97, 57, 117, 18, 78, 38,  98, 58, 118, 19, 79, 39,  99, 59, 119}));
}

TEST(TransposeTest, TestRefOps4D18) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5}, /*perms=*/{3, 0, 1, 2}),
      ElementsAreArray({0,  5,  10, 15, 20, 25, 30, 35, 40,  45,  50,  55,
                        60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115,
                        1,  6,  11, 16, 21, 26, 31, 36, 41,  46,  51,  56,
                        61, 66, 71, 76, 81, 86, 91, 96, 101, 106, 111, 116,
                        2,  7,  12, 17, 22, 27, 32, 37, 42,  47,  52,  57,
                        62, 67, 72, 77, 82, 87, 92, 97, 102, 107, 112, 117,
                        3,  8,  13, 18, 23, 28, 33, 38, 43,  48,  53,  58,
                        63, 68, 73, 78, 83, 88, 93, 98, 103, 108, 113, 118,
                        4,  9,  14, 19, 24, 29, 34, 39, 44,  49,  54,  59,
                        64, 69, 74, 79, 84, 89, 94, 99, 104, 109, 114, 119}));
}

TEST(TransposeTest, TestRefOps4D19) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5}, /*perms=*/{3, 0, 2, 1}),
      ElementsAreArray(
          {0,  20, 40,  5,  25, 45,  10, 30, 50,  15, 35, 55,  60, 80, 100,
           65, 85, 105, 70, 90, 110, 75, 95, 115, 1,  21, 41,  6,  26, 46,
           11, 31, 51,  16, 36, 56,  61, 81, 101, 66, 86, 106, 71, 91, 111,
           76, 96, 116, 2,  22, 42,  7,  27, 47,  12, 32, 52,  17, 37, 57,
           62, 82, 102, 67, 87, 107, 72, 92, 112, 77, 97, 117, 3,  23, 43,
           8,  28, 48,  13, 33, 53,  18, 38, 58,  63, 83, 103, 68, 88, 108,
           73, 93, 113, 78, 98, 118, 4,  24, 44,  9,  29, 49,  14, 34, 54,
           19, 39, 59,  64, 84, 104, 69, 89, 109, 74, 94, 114, 79, 99, 119}));
}

TEST(TransposeTest, TestRefOps4D20) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5}, /*perms=*/{3, 1, 0, 2}),
      ElementsAreArray({0,  5,  10, 15, 60, 65, 70, 75, 20,  25,  30,  35,
                        80, 85, 90, 95, 40, 45, 50, 55, 100, 105, 110, 115,
                        1,  6,  11, 16, 61, 66, 71, 76, 21,  26,  31,  36,
                        81, 86, 91, 96, 41, 46, 51, 56, 101, 106, 111, 116,
                        2,  7,  12, 17, 62, 67, 72, 77, 22,  27,  32,  37,
                        82, 87, 92, 97, 42, 47, 52, 57, 102, 107, 112, 117,
                        3,  8,  13, 18, 63, 68, 73, 78, 23,  28,  33,  38,
                        83, 88, 93, 98, 43, 48, 53, 58, 103, 108, 113, 118,
                        4,  9,  14, 19, 64, 69, 74, 79, 24,  29,  34,  39,
                        84, 89, 94, 99, 44, 49, 54, 59, 104, 109, 114, 119}));
}

TEST(TransposeTest, TestRefOps4D21) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5}, /*perms=*/{3, 1, 2, 0}),
      ElementsAreArray({0,  60, 5,  65, 10, 70,  15, 75,  20, 80,  25, 85,
                        30, 90, 35, 95, 40, 100, 45, 105, 50, 110, 55, 115,
                        1,  61, 6,  66, 11, 71,  16, 76,  21, 81,  26, 86,
                        31, 91, 36, 96, 41, 101, 46, 106, 51, 111, 56, 116,
                        2,  62, 7,  67, 12, 72,  17, 77,  22, 82,  27, 87,
                        32, 92, 37, 97, 42, 102, 47, 107, 52, 112, 57, 117,
                        3,  63, 8,  68, 13, 73,  18, 78,  23, 83,  28, 88,
                        33, 93, 38, 98, 43, 103, 48, 108, 53, 113, 58, 118,
                        4,  64, 9,  69, 14, 74,  19, 79,  24, 84,  29, 89,
                        34, 94, 39, 99, 44, 104, 49, 109, 54, 114, 59, 119}));
}

TEST(TransposeTest, TestRefOps4D22) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5}, /*perms=*/{3, 2, 0, 1}),
      ElementsAreArray(
          {0,  20, 40,  60, 80, 100, 5,  25, 45,  65, 85, 105, 10, 30, 50,
           70, 90, 110, 15, 35, 55,  75, 95, 115, 1,  21, 41,  61, 81, 101,
           6,  26, 46,  66, 86, 106, 11, 31, 51,  71, 91, 111, 16, 36, 56,
           76, 96, 116, 2,  22, 42,  62, 82, 102, 7,  27, 47,  67, 87, 107,
           12, 32, 52,  72, 92, 112, 17, 37, 57,  77, 97, 117, 3,  23, 43,
           63, 83, 103, 8,  28, 48,  68, 88, 108, 13, 33, 53,  73, 93, 113,
           18, 38, 58,  78, 98, 118, 4,  24, 44,  64, 84, 104, 9,  29, 49,
           69, 89, 109, 14, 34, 54,  74, 94, 114, 19, 39, 59,  79, 99, 119}));
}

TEST(TransposeTest, TestRefOps4D23) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5}, /*perms=*/{3, 2, 1, 0}),
      ElementsAreArray(
          {0,  60, 20,  80, 40, 100, 5,  65, 25,  85, 45, 105, 10, 70, 30,
           90, 50, 110, 15, 75, 35,  95, 55, 115, 1,  61, 21,  81, 41, 101,
           6,  66, 26,  86, 46, 106, 11, 71, 31,  91, 51, 111, 16, 76, 36,
           96, 56, 116, 2,  62, 22,  82, 42, 102, 7,  67, 27,  87, 47, 107,
           12, 72, 32,  92, 52, 112, 17, 77, 37,  97, 57, 117, 3,  63, 23,
           83, 43, 103, 8,  68, 28,  88, 48, 108, 13, 73, 33,  93, 53, 113,
           18, 78, 38,  98, 58, 118, 4,  64, 24,  84, 44, 104, 9,  69, 29,
           89, 49, 109, 14, 74, 34,  94, 54, 114, 19, 79, 39,  99, 59, 119}));
}

TEST(TransposeTest, TestRefOps5D0) {
  const std::vector<float> ref = [] {
    std::vector<float> ref(720);
    absl::c_iota(ref, 0);
    return ref;
  }();
  EXPECT_THAT(RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5, 6},
                                        /*perms=*/{0, 1, 2, 3, 4}),
              ElementsAreArray(ref));
}

TEST(TransposeTest, TestRefOps5D1) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5, 6},
                                /*perms=*/{4, 3, 2, 1, 0}),
      ElementsAreArray(
          {0,   360, 120, 480, 240, 600, 30,  390, 150, 510, 270, 630, 60,  420,
           180, 540, 300, 660, 90,  450, 210, 570, 330, 690, 6,   366, 126, 486,
           246, 606, 36,  396, 156, 516, 276, 636, 66,  426, 186, 546, 306, 666,
           96,  456, 216, 576, 336, 696, 12,  372, 132, 492, 252, 612, 42,  402,
           162, 522, 282, 642, 72,  432, 192, 552, 312, 672, 102, 462, 222, 582,
           342, 702, 18,  378, 138, 498, 258, 618, 48,  408, 168, 528, 288, 648,
           78,  438, 198, 558, 318, 678, 108, 468, 228, 588, 348, 708, 24,  384,
           144, 504, 264, 624, 54,  414, 174, 534, 294, 654, 84,  444, 204, 564,
           324, 684, 114, 474, 234, 594, 354, 714, 1,   361, 121, 481, 241, 601,
           31,  391, 151, 511, 271, 631, 61,  421, 181, 541, 301, 661, 91,  451,
           211, 571, 331, 691, 7,   367, 127, 487, 247, 607, 37,  397, 157, 517,
           277, 637, 67,  427, 187, 547, 307, 667, 97,  457, 217, 577, 337, 697,
           13,  373, 133, 493, 253, 613, 43,  403, 163, 523, 283, 643, 73,  433,
           193, 553, 313, 673, 103, 463, 223, 583, 343, 703, 19,  379, 139, 499,
           259, 619, 49,  409, 169, 529, 289, 649, 79,  439, 199, 559, 319, 679,
           109, 469, 229, 589, 349, 709, 25,  385, 145, 505, 265, 625, 55,  415,
           175, 535, 295, 655, 85,  445, 205, 565, 325, 685, 115, 475, 235, 595,
           355, 715, 2,   362, 122, 482, 242, 602, 32,  392, 152, 512, 272, 632,
           62,  422, 182, 542, 302, 662, 92,  452, 212, 572, 332, 692, 8,   368,
           128, 488, 248, 608, 38,  398, 158, 518, 278, 638, 68,  428, 188, 548,
           308, 668, 98,  458, 218, 578, 338, 698, 14,  374, 134, 494, 254, 614,
           44,  404, 164, 524, 284, 644, 74,  434, 194, 554, 314, 674, 104, 464,
           224, 584, 344, 704, 20,  380, 140, 500, 260, 620, 50,  410, 170, 530,
           290, 650, 80,  440, 200, 560, 320, 680, 110, 470, 230, 590, 350, 710,
           26,  386, 146, 506, 266, 626, 56,  416, 176, 536, 296, 656, 86,  446,
           206, 566, 326, 686, 116, 476, 236, 596, 356, 716, 3,   363, 123, 483,
           243, 603, 33,  393, 153, 513, 273, 633, 63,  423, 183, 543, 303, 663,
           93,  453, 213, 573, 333, 693, 9,   369, 129, 489, 249, 609, 39,  399,
           159, 519, 279, 639, 69,  429, 189, 549, 309, 669, 99,  459, 219, 579,
           339, 699, 15,  375, 135, 495, 255, 615, 45,  405, 165, 525, 285, 645,
           75,  435, 195, 555, 315, 675, 105, 465, 225, 585, 345, 705, 21,  381,
           141, 501, 261, 621, 51,  411, 171, 531, 291, 651, 81,  441, 201, 561,
           321, 681, 111, 471, 231, 591, 351, 711, 27,  387, 147, 507, 267, 627,
           57,  417, 177, 537, 297, 657, 87,  447, 207, 567, 327, 687, 117, 477,
           237, 597, 357, 717, 4,   364, 124, 484, 244, 604, 34,  394, 154, 514,
           274, 634, 64,  424, 184, 544, 304, 664, 94,  454, 214, 574, 334, 694,
           10,  370, 130, 490, 250, 610, 40,  400, 160, 520, 280, 640, 70,  430,
           190, 550, 310, 670, 100, 460, 220, 580, 340, 700, 16,  376, 136, 496,
           256, 616, 46,  406, 166, 526, 286, 646, 76,  436, 196, 556, 316, 676,
           106, 466, 226, 586, 346, 706, 22,  382, 142, 502, 262, 622, 52,  412,
           172, 532, 292, 652, 82,  442, 202, 562, 322, 682, 112, 472, 232, 592,
           352, 712, 28,  388, 148, 508, 268, 628, 58,  418, 178, 538, 298, 658,
           88,  448, 208, 568, 328, 688, 118, 478, 238, 598, 358, 718, 5,   365,
           125, 485, 245, 605, 35,  395, 155, 515, 275, 635, 65,  425, 185, 545,
           305, 665, 95,  455, 215, 575, 335, 695, 11,  371, 131, 491, 251, 611,
           41,  401, 161, 521, 281, 641, 71,  431, 191, 551, 311, 671, 101, 461,
           221, 581, 341, 701, 17,  377, 137, 497, 257, 617, 47,  407, 167, 527,
           287, 647, 77,  437, 197, 557, 317, 677, 107, 467, 227, 587, 347, 707,
           23,  383, 143, 503, 263, 623, 53,  413, 173, 533, 293, 653, 83,  443,
           203, 563, 323, 683, 113, 473, 233, 593, 353, 713, 29,  389, 149, 509,
           269, 629, 59,  419, 179, 539, 299, 659, 89,  449, 209, 569, 329, 689,
           119, 479, 239, 599, 359, 719}));
}

TEST(TransposeTest, TestRefOps5D2) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5, 6},
                                /*perms=*/{1, 0, 2, 3, 4}),
      ElementsAreArray(
          {0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,
           14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,
           28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,
           42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,
           56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
           70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,
           84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,
           98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
           112, 113, 114, 115, 116, 117, 118, 119, 360, 361, 362, 363, 364, 365,
           366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
           380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393,
           394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407,
           408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421,
           422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435,
           436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449,
           450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463,
           464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477,
           478, 479, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
           132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145,
           146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
           160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
           174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187,
           188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
           202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215,
           216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229,
           230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 480, 481, 482, 483,
           484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497,
           498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511,
           512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525,
           526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539,
           540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553,
           554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
           568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
           582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595,
           596, 597, 598, 599, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
           250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
           264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
           278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
           292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305,
           306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
           320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333,
           334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
           348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 600, 601,
           602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615,
           616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
           630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643,
           644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657,
           658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671,
           672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685,
           686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699,
           700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
           714, 715, 716, 717, 718, 719}));
}

TEST(TransposeTest, TestRefOps5D3) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5, 6},
                                /*perms=*/{1, 2, 0, 3, 4}),
      ElementsAreArray(
          {0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,
           14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,
           28,  29,  360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
           372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385,
           386, 387, 388, 389, 30,  31,  32,  33,  34,  35,  36,  37,  38,  39,
           40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,
           54,  55,  56,  57,  58,  59,  390, 391, 392, 393, 394, 395, 396, 397,
           398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
           412, 413, 414, 415, 416, 417, 418, 419, 60,  61,  62,  63,  64,  65,
           66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,
           80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  420, 421, 422, 423,
           424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437,
           438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 90,  91,
           92,  93,  94,  95,  96,  97,  98,  99,  100, 101, 102, 103, 104, 105,
           106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
           450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463,
           464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477,
           478, 479, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
           132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145,
           146, 147, 148, 149, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489,
           490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503,
           504, 505, 506, 507, 508, 509, 150, 151, 152, 153, 154, 155, 156, 157,
           158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
           172, 173, 174, 175, 176, 177, 178, 179, 510, 511, 512, 513, 514, 515,
           516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529,
           530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 180, 181, 182, 183,
           184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197,
           198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 540, 541,
           542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555,
           556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
           210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
           224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237,
           238, 239, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
           582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595,
           596, 597, 598, 599, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
           250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
           264, 265, 266, 267, 268, 269, 600, 601, 602, 603, 604, 605, 606, 607,
           608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621,
           622, 623, 624, 625, 626, 627, 628, 629, 270, 271, 272, 273, 274, 275,
           276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
           290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 630, 631, 632, 633,
           634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647,
           648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 300, 301,
           302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315,
           316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329,
           660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673,
           674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687,
           688, 689, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
           342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355,
           356, 357, 358, 359, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699,
           700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
           714, 715, 716, 717, 718, 719}));
}

TEST(TransposeTest, TestRefOps5D4) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5, 6},
                                /*perms=*/{1, 2, 3, 0, 4}),
      ElementsAreArray(
          {0,   1,   2,   3,   4,   5,   360, 361, 362, 363, 364, 365, 6,   7,
           8,   9,   10,  11,  366, 367, 368, 369, 370, 371, 12,  13,  14,  15,
           16,  17,  372, 373, 374, 375, 376, 377, 18,  19,  20,  21,  22,  23,
           378, 379, 380, 381, 382, 383, 24,  25,  26,  27,  28,  29,  384, 385,
           386, 387, 388, 389, 30,  31,  32,  33,  34,  35,  390, 391, 392, 393,
           394, 395, 36,  37,  38,  39,  40,  41,  396, 397, 398, 399, 400, 401,
           42,  43,  44,  45,  46,  47,  402, 403, 404, 405, 406, 407, 48,  49,
           50,  51,  52,  53,  408, 409, 410, 411, 412, 413, 54,  55,  56,  57,
           58,  59,  414, 415, 416, 417, 418, 419, 60,  61,  62,  63,  64,  65,
           420, 421, 422, 423, 424, 425, 66,  67,  68,  69,  70,  71,  426, 427,
           428, 429, 430, 431, 72,  73,  74,  75,  76,  77,  432, 433, 434, 435,
           436, 437, 78,  79,  80,  81,  82,  83,  438, 439, 440, 441, 442, 443,
           84,  85,  86,  87,  88,  89,  444, 445, 446, 447, 448, 449, 90,  91,
           92,  93,  94,  95,  450, 451, 452, 453, 454, 455, 96,  97,  98,  99,
           100, 101, 456, 457, 458, 459, 460, 461, 102, 103, 104, 105, 106, 107,
           462, 463, 464, 465, 466, 467, 108, 109, 110, 111, 112, 113, 468, 469,
           470, 471, 472, 473, 114, 115, 116, 117, 118, 119, 474, 475, 476, 477,
           478, 479, 120, 121, 122, 123, 124, 125, 480, 481, 482, 483, 484, 485,
           126, 127, 128, 129, 130, 131, 486, 487, 488, 489, 490, 491, 132, 133,
           134, 135, 136, 137, 492, 493, 494, 495, 496, 497, 138, 139, 140, 141,
           142, 143, 498, 499, 500, 501, 502, 503, 144, 145, 146, 147, 148, 149,
           504, 505, 506, 507, 508, 509, 150, 151, 152, 153, 154, 155, 510, 511,
           512, 513, 514, 515, 156, 157, 158, 159, 160, 161, 516, 517, 518, 519,
           520, 521, 162, 163, 164, 165, 166, 167, 522, 523, 524, 525, 526, 527,
           168, 169, 170, 171, 172, 173, 528, 529, 530, 531, 532, 533, 174, 175,
           176, 177, 178, 179, 534, 535, 536, 537, 538, 539, 180, 181, 182, 183,
           184, 185, 540, 541, 542, 543, 544, 545, 186, 187, 188, 189, 190, 191,
           546, 547, 548, 549, 550, 551, 192, 193, 194, 195, 196, 197, 552, 553,
           554, 555, 556, 557, 198, 199, 200, 201, 202, 203, 558, 559, 560, 561,
           562, 563, 204, 205, 206, 207, 208, 209, 564, 565, 566, 567, 568, 569,
           210, 211, 212, 213, 214, 215, 570, 571, 572, 573, 574, 575, 216, 217,
           218, 219, 220, 221, 576, 577, 578, 579, 580, 581, 222, 223, 224, 225,
           226, 227, 582, 583, 584, 585, 586, 587, 228, 229, 230, 231, 232, 233,
           588, 589, 590, 591, 592, 593, 234, 235, 236, 237, 238, 239, 594, 595,
           596, 597, 598, 599, 240, 241, 242, 243, 244, 245, 600, 601, 602, 603,
           604, 605, 246, 247, 248, 249, 250, 251, 606, 607, 608, 609, 610, 611,
           252, 253, 254, 255, 256, 257, 612, 613, 614, 615, 616, 617, 258, 259,
           260, 261, 262, 263, 618, 619, 620, 621, 622, 623, 264, 265, 266, 267,
           268, 269, 624, 625, 626, 627, 628, 629, 270, 271, 272, 273, 274, 275,
           630, 631, 632, 633, 634, 635, 276, 277, 278, 279, 280, 281, 636, 637,
           638, 639, 640, 641, 282, 283, 284, 285, 286, 287, 642, 643, 644, 645,
           646, 647, 288, 289, 290, 291, 292, 293, 648, 649, 650, 651, 652, 653,
           294, 295, 296, 297, 298, 299, 654, 655, 656, 657, 658, 659, 300, 301,
           302, 303, 304, 305, 660, 661, 662, 663, 664, 665, 306, 307, 308, 309,
           310, 311, 666, 667, 668, 669, 670, 671, 312, 313, 314, 315, 316, 317,
           672, 673, 674, 675, 676, 677, 318, 319, 320, 321, 322, 323, 678, 679,
           680, 681, 682, 683, 324, 325, 326, 327, 328, 329, 684, 685, 686, 687,
           688, 689, 330, 331, 332, 333, 334, 335, 690, 691, 692, 693, 694, 695,
           336, 337, 338, 339, 340, 341, 696, 697, 698, 699, 700, 701, 342, 343,
           344, 345, 346, 347, 702, 703, 704, 705, 706, 707, 348, 349, 350, 351,
           352, 353, 708, 709, 710, 711, 712, 713, 354, 355, 356, 357, 358, 359,
           714, 715, 716, 717, 718, 719}));
}

TEST(TransposeTest, TestRefOps5D5) {
  EXPECT_THAT(
      RunTestPermutation<float>(/*shape=*/{2, 3, 4, 5, 6},
                                /*perms=*/{1, 2, 3, 4, 0}),
      ElementsAreArray(
          {0,   360, 1,   361, 2,   362, 3,   363, 4,   364, 5,   365, 6,   366,
           7,   367, 8,   368, 9,   369, 10,  370, 11,  371, 12,  372, 13,  373,
           14,  374, 15,  375, 16,  376, 17,  377, 18,  378, 19,  379, 20,  380,
           21,  381, 22,  382, 23,  383, 24,  384, 25,  385, 26,  386, 27,  387,
           28,  388, 29,  389, 30,  390, 31,  391, 32,  392, 33,  393, 34,  394,
           35,  395, 36,  396, 37,  397, 38,  398, 39,  399, 40,  400, 41,  401,
           42,  402, 43,  403, 44,  404, 45,  405, 46,  406, 47,  407, 48,  408,
           49,  409, 50,  410, 51,  411, 52,  412, 53,  413, 54,  414, 55,  415,
           56,  416, 57,  417, 58,  418, 59,  419, 60,  420, 61,  421, 62,  422,
           63,  423, 64,  424, 65,  425, 66,  426, 67,  427, 68,  428, 69,  429,
           70,  430, 71,  431, 72,  432, 73,  433, 74,  434, 75,  435, 76,  436,
           77,  437, 78,  438, 79,  439, 80,  440, 81,  441, 82,  442, 83,  443,
           84,  444, 85,  445, 86,  446, 87,  447, 88,  448, 89,  449, 90,  450,
           91,  451, 92,  452, 93,  453, 94,  454, 95,  455, 96,  456, 97,  457,
           98,  458, 99,  459, 100, 460, 101, 461, 102, 462, 103, 463, 104, 464,
           105, 465, 106, 466, 107, 467, 108, 468, 109, 469, 110, 470, 111, 471,
           112, 472, 113, 473, 114, 474, 115, 475, 116, 476, 117, 477, 118, 478,
           119, 479, 120, 480, 121, 481, 122, 482, 123, 483, 124, 484, 125, 485,
           126, 486, 127, 487, 128, 488, 129, 489, 130, 490, 131, 491, 132, 492,
           133, 493, 134, 494, 135, 495, 136, 496, 137, 497, 138, 498, 139, 499,
           140, 500, 141, 501, 142, 502, 143, 503, 144, 504, 145, 505, 146, 506,
           147, 507, 148, 508, 149, 509, 150, 510, 151, 511, 152, 512, 153, 513,
           154, 514, 155, 515, 156, 516, 157, 517, 158, 518, 159, 519, 160, 520,
           161, 521, 162, 522, 163, 523, 164, 524, 165, 525, 166, 526, 167, 527,
           168, 528, 169, 529, 170, 530, 171, 531, 172, 532, 173, 533, 174, 534,
           175, 535, 176, 536, 177, 537, 178, 538, 179, 539, 180, 540, 181, 541,
           182, 542, 183, 543, 184, 544, 185, 545, 186, 546, 187, 547, 188, 548,
           189, 549, 190, 550, 191, 551, 192, 552, 193, 553, 194, 554, 195, 555,
           196, 556, 197, 557, 198, 558, 199, 559, 200, 560, 201, 561, 202, 562,
           203, 563, 204, 564, 205, 565, 206, 566, 207, 567, 208, 568, 209, 569,
           210, 570, 211, 571, 212, 572, 213, 573, 214, 574, 215, 575, 216, 576,
           217, 577, 218, 578, 219, 579, 220, 580, 221, 581, 222, 582, 223, 583,
           224, 584, 225, 585, 226, 586, 227, 587, 228, 588, 229, 589, 230, 590,
           231, 591, 232, 592, 233, 593, 234, 594, 235, 595, 236, 596, 237, 597,
           238, 598, 239, 599, 240, 600, 241, 601, 242, 602, 243, 603, 244, 604,
           245, 605, 246, 606, 247, 607, 248, 608, 249, 609, 250, 610, 251, 611,
           252, 612, 253, 613, 254, 614, 255, 615, 256, 616, 257, 617, 258, 618,
           259, 619, 260, 620, 261, 621, 262, 622, 263, 623, 264, 624, 265, 625,
           266, 626, 267, 627, 268, 628, 269, 629, 270, 630, 271, 631, 272, 632,
           273, 633, 274, 634, 275, 635, 276, 636, 277, 637, 278, 638, 279, 639,
           280, 640, 281, 641, 282, 642, 283, 643, 284, 644, 285, 645, 286, 646,
           287, 647, 288, 648, 289, 649, 290, 650, 291, 651, 292, 652, 293, 653,
           294, 654, 295, 655, 296, 656, 297, 657, 298, 658, 299, 659, 300, 660,
           301, 661, 302, 662, 303, 663, 304, 664, 305, 665, 306, 666, 307, 667,
           308, 668, 309, 669, 310, 670, 311, 671, 312, 672, 313, 673, 314, 674,
           315, 675, 316, 676, 317, 677, 318, 678, 319, 679, 320, 680, 321, 681,
           322, 682, 323, 683, 324, 684, 325, 685, 326, 686, 327, 687, 328, 688,
           329, 689, 330, 690, 331, 691, 332, 692, 333, 693, 334, 694, 335, 695,
           336, 696, 337, 697, 338, 698, 339, 699, 340, 700, 341, 701, 342, 702,
           343, 703, 344, 704, 345, 705, 346, 706, 347, 707, 348, 708, 349, 709,
           350, 710, 351, 711, 352, 712, 353, 713, 354, 714, 355, 715, 356, 716,
           357, 717, 358, 718, 359, 719}));
}

}  // namespace
}  // namespace tflite
