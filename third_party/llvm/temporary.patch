diff --git a/mlir/lib/Dialect/Linalg/Transforms/Vectorization.cpp b/mlir/lib/Dialect/Linalg/Transforms/Vectorization.cpp
index 271d96219a0c..10c9dd268b2a 100644
--- a/mlir/lib/Dialect/Linalg/Transforms/Vectorization.cpp
+++ b/mlir/lib/Dialect/Linalg/Transforms/Vectorization.cpp
@@ -1433,8 +1433,6 @@ struct Conv1DGenerator : public StructuredGenerator<LinalgOp> {
       rhsShape = {fSize, cSize, kwSize};
       resShape = {nSize, fSize, wSize};
       break;
-    default:
-      return failure();
     }
 
     vector::TransferWriteOp write;
@@ -1469,7 +1467,7 @@ struct Conv1DGenerator : public StructuredGenerator<LinalgOp> {
     case Conv1DOpOrder::Nwc:
       // Base case, so no transposes necessary.
       break;
-    case Conv1DOpOrder::Ncw:
+    case Conv1DOpOrder::Ncw: {
       // To match base vectorization case, we pre-transpose current case.
       // ncw -> nwc
       static constexpr std::array<int64_t, 3> permLhs = {0, 2, 1};
@@ -1481,8 +1479,7 @@ struct Conv1DGenerator : public StructuredGenerator<LinalgOp> {
       static constexpr std::array<int64_t, 3> permRes = {0, 2, 1};
       res = builder.create<vector::TransposeOp>(loc, res, permRes);
       break;
-    default:
-      return failure();
+    }
     }
 
     //===------------------------------------------------------------------===//
@@ -1545,13 +1542,12 @@ struct Conv1DGenerator : public StructuredGenerator<LinalgOp> {
     case Conv1DOpOrder::Nwc:
       // Base case, so no transposes necessary.
       break;
-    case Conv1DOpOrder::Ncw:
+    case Conv1DOpOrder::Ncw: {
       // nwf -> nfw
       static constexpr std::array<int64_t, 3> perm = {0, 2, 1};
       res = builder.create<vector::TransposeOp>(loc, res, perm);
       break;
-    default:
-      return failure();
+    }
     }
 
     // Write back res slice of size {n, w, f} @ [0, 0, 0].
