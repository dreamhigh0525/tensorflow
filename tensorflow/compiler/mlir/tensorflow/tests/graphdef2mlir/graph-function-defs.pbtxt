# RUN: tf-mlir-translate -graphdef-to-mlir %s -o - | FileCheck %s

node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "input0"
  op: "TPUReplicatedInput"
  input: "Placeholder"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "input1"
  op: "TPUReplicatedInput"
  input: "Placeholder_1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cluster/pivot"
  op: "NoOp"
}
node {
  name: "TPUReplicateMetadata"
  op: "TPUReplicateMetadata"
  input: "^cluster/pivot"
  attr {
    key: "_tpu_replicate"
    value {
      s: "cluster"
    }
  }
  attr {
    key: "computation_shape"
    value {
      list {
      }
    }
  }
  attr {
    key: "device_assignment"
    value {
      list {
      }
    }
  }
  attr {
    key: "host_compute_core"
    value {
      list {
      }
    }
  }
  attr {
    key: "num_replicas"
    value {
      i: 1
    }
  }
  attr {
    key: "topology"
    value {
      s: ""
    }
  }
  attr {
    key: "use_tpu"
    value {
      b: true
    }
  }
}
node {
  name: "replicated_input_0"
  op: "Identity"
  input: "input0"
  input: "^TPUReplicateMetadata"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_tpu_replicate"
    value {
      s: "cluster"
    }
  }
}
node {
  name: "replicated_input_1"
  op: "Identity"
  input: "input1"
  input: "^TPUReplicateMetadata"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_tpu_replicate"
    value {
      s: "cluster"
    }
  }
}
node {
  name: "Less"
  op: "Less"
  input: "replicated_input_0"
  input: "replicated_input_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_tpu_replicate"
    value {
      s: "cluster"
    }
  }
}
node {
  name: "cond"
  op: "If"
  input: "Less"
  input: "replicated_input_1"
  input: "replicated_input_0"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "_tpu_replicate"
    value {
      s: "cluster"
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "cond_false"
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "cond_true"
        attr {
          key: "ping"
          value {
            s: "ack"
          }
        }
        attr {
          key: "how_many"
          value {
            i: 32
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^cluster/pivot"
  attr {
    key: "_tpu_replicate"
    value {
      s: "cluster"
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "cond"
  device: "/device:TPU_REPLICATED_CORE:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_tpu_replicate"
    value {
      s: "cluster"
    }
  }
}
node {
  name: "Identity_1"
  op: "Identity"
  input: "cond:1"
  device: "/device:TPU_REPLICATED_CORE:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_tpu_replicate"
    value {
      s: "cluster"
    }
  }
}
node {
  name: "output0"
  op: "TPUReplicatedOutput"
  input: "Identity"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "num_replicas"
    value {
      i: 1
    }
  }
}
node {
  name: "output1"
  op: "TPUReplicatedOutput"
  input: "Identity_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "num_replicas"
    value {
      i: 1
    }
  }
}
node {
  name: "TPUCompilationResult"
  op: "TPUCompilationResult"
  input: "^TPUReplicateMetadata"
  attr {
    key: "_tpu_compilation_status"
    value {
      s: "cluster"
    }
  }
}
node {
  name: "output_0_shard_0"
  op: "Identity"
  input: "output0"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "output_1_shard_0"
  op: "Identity"
  input: "output1"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ConfigureDistributedTPU"
  op: "ConfigureDistributedTPU"
  device: "/device:TPU_SYSTEM:0"
  attr {
    key: "embedding_config"
    value {
      s: ""
    }
  }
  attr {
    key: "is_global_init"
    value {
      b: false
    }
  }
  attr {
    key: "tpu_embedding_config"
    value {
      s: ""
    }
  }
}
library {
  function {
    signature {
      name: "cond_true"
      input_arg {
        name: "cond_true"
        type: DT_INT32
      }
      input_arg {
        name: "cond_true1"
        type: DT_INT32
      }
      output_arg {
        name: "cond_true2"
        type: DT_INT32
      }
      output_arg {
        name: "cond_true3"
        type: DT_INT32
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "cond_true"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "cond_true1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    ret {
      key: "cond_true2"
      value: "Identity:output:0"
    }
    ret {
      key: "cond_true3"
      value: "Identity_1:output:0"
    }
  }
  function {
    signature {
      name: "cond_false"
      input_arg {
        name: "cond_false"
        type: DT_INT32
      }
      input_arg {
        name: "cond_false1"
        type: DT_INT32
      }
      output_arg {
        name: "cond_false2"
        type: DT_INT32
      }
      output_arg {
        name: "cond_false3"
        type: DT_INT32
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "cond_false"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "cond_false1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    ret {
      key: "cond_false2"
      value: "Identity_1:output:0"
    }
    ret {
      key: "cond_false3"
      value: "Identity:output:0"
    }
  }
}
versions {
  producer: 27
  min_consumer: 12
}

# CHECK:       func @main() {
# CHECK-NEXT:    %0:2 = "_tf.ConfigureDistributedTPU"() {device = "/device:TPU_SYSTEM:0", embedding_config = "", is_global_init = false, name = "ConfigureDistributedTPU", tpu_embedding_config = ""} : () -> (tensor<*x!tf.string>, !_tf.control)
# CHECK-NEXT:    %1:2 = "_tf.Placeholder"() {device = "", dtype = "tfdtype$DT_INT32", name = "Placeholder", shape = "tfshape$unknown_rank: true\0A"} : () -> (tensor<*xi32>, !_tf.control)
# CHECK-NEXT:    %2:2 = "_tf.TPUReplicatedInput"(%1#0) {N = 1 : i64, T = "tfdtype$DT_INT32", device = "", name = "input0"} : (tensor<*xi32>) -> (tensor<*xi32>, !_tf.control)
# CHECK-NEXT:    %3:2 = "_tf.Placeholder"() {device = "", dtype = "tfdtype$DT_INT32", name = "Placeholder_1", shape = "tfshape$unknown_rank: true\0A"} : () -> (tensor<*xi32>, !_tf.control)
# CHECK-NEXT:    %4:2 = "_tf.TPUReplicatedInput"(%3#0) {N = 1 : i64, T = "tfdtype$DT_INT32", device = "", name = "input1"} : (tensor<*xi32>) -> (tensor<*xi32>, !_tf.control)
# CHECK-NEXT:    %5 = "_tf.NoOp"() {device = "", name = "cluster/pivot"} : () -> !_tf.control
# CHECK-NEXT:    %6 = "_tf.NoOp"(%5) {_tpu_replicate = "cluster", device = "", name = "NoOp"} : (!_tf.control) -> !_tf.control
# CHECK-NEXT:    %7 = "_tf.TPUReplicateMetadata"(%5) {_tpu_replicate = "cluster", allow_soft_placement = false, computation_shape = [], device = "", device_assignment = [], host_compute_core = [], name = "TPUReplicateMetadata", num_cores_per_replica = 1 : i64, num_replicas = 1 : i64, padding_map = [], step_marker_location = "STEP_MARK_AT_ENTRY", topology = "", use_tpu = true} : (!_tf.control) -> !_tf.control
# CHECK-NEXT:    %8:2 = "_tf.TPUCompilationResult"(%7) {_tpu_compilation_status = "cluster", device = "", name = "TPUCompilationResult"} : (!_tf.control) -> (tensor<!tf.string>, !_tf.control)
# CHECK-NEXT:    %9:2 = "_tf.Identity"(%2#0, %7) {T = "tfdtype$DT_INT32", _tpu_replicate = "cluster", device = "", name = "replicated_input_0"} : (tensor<*xi32>, !_tf.control) -> (tensor<*xi32>, !_tf.control)
# CHECK-NEXT:    %10:2 = "_tf.Identity"(%4#0, %7) {T = "tfdtype$DT_INT32", _tpu_replicate = "cluster", device = "", name = "replicated_input_1"} : (tensor<*xi32>, !_tf.control) -> (tensor<*xi32>, !_tf.control)
# CHECK-NEXT:    %11:2 = "_tf.Less"(%9#0, %10#0) {T = "tfdtype$DT_INT32", _tpu_replicate = "cluster", device = "", name = "Less"} : (tensor<*xi32>, tensor<*xi32>) -> (tensor<*xi1>, !_tf.control)
# CHECK-NEXT:    %12:3 = "_tf.If"(%11#0, %10#0, %9#0) {Tcond = "tfdtype$DT_BOOL", Tin = ["tfdtype$DT_INT32", "tfdtype$DT_INT32"], Tout = ["tfdtype$DT_INT32", "tfdtype$DT_INT32"], _tpu_replicate = "cluster", device = "", else_branch = @cond_false0, is_stateless = false, name = "cond", output_shapes = ["tfshape$unknown_rank: true\0A", "tfshape$unknown_rank: true\0A"], then_branch = @cond_true0, then_branch.how_many = 32 : i64, then_branch.ping = "ack"} : (tensor<*xi1>, tensor<*xi32>, tensor<*xi32>) -> (tensor<*xi32>, tensor<*xi32>, !_tf.control)
# CHECK-NEXT:    %13:2 = "_tf.Identity"(%12#0) {T = "tfdtype$DT_INT32", _tpu_replicate = "cluster", device = "/device:TPU_REPLICATED_CORE:0", name = "Identity"} : (tensor<*xi32>) -> (tensor<*xi32>, !_tf.control)
# CHECK-NEXT:    %14:2 = "_tf.TPUReplicatedOutput"(%13#0) {T = "tfdtype$DT_INT32", device = "", name = "output0", num_replicas = 1 : i64} : (tensor<*xi32>) -> (tensor<*xi32>, !_tf.control)
# CHECK-NEXT:    %15:2 = "_tf.Identity"(%14#0, %6) {T = "tfdtype$DT_INT32", device = "", name = "output_0_shard_0"} : (tensor<*xi32>, !_tf.control) -> (tensor<*xi32>, !_tf.control)
# CHECK-NEXT:    %16:2 = "_tf.Identity"(%12#1) {T = "tfdtype$DT_INT32", _tpu_replicate = "cluster", device = "/device:TPU_REPLICATED_CORE:0", name = "Identity_1"} : (tensor<*xi32>) -> (tensor<*xi32>, !_tf.control)
# CHECK-NEXT:    %17:2 = "_tf.TPUReplicatedOutput"(%16#0) {T = "tfdtype$DT_INT32", device = "", name = "output1", num_replicas = 1 : i64} : (tensor<*xi32>) -> (tensor<*xi32>, !_tf.control)
# CHECK-NEXT:    %18:2 = "_tf.Identity"(%17#0, %6) {T = "tfdtype$DT_INT32", device = "", name = "output_1_shard_0"} : (tensor<*xi32>, !_tf.control) -> (tensor<*xi32>, !_tf.control)
# CHECK-NEXT:    return
# CHECK-NEXT:  }
# CHECK:  func @cond_false0(%arg0: tensor<*xi32>, %arg1: tensor<*xi32>) -> (tensor<*xi32>, tensor<*xi32>) {
# CHECK-NEXT:    %0:2 = "_tf.Identity"(%arg0) {T = "tfdtype$DT_INT32", device = "", name = "Identity"} : (tensor<*xi32>) -> (tensor<*xi32>, !_tf.control)
# CHECK-NEXT:    %1:2 = "_tf.Identity"(%arg1) {T = "tfdtype$DT_INT32", device = "", name = "Identity_1"} : (tensor<*xi32>) -> (tensor<*xi32>, !_tf.control)
# CHECK-NEXT:    return %1#0, %0#0 : tensor<*xi32>, tensor<*xi32>
# CHECK-NEXT:  }
# CHECK:  func @cond_true0(%arg0: tensor<*xi32>, %arg1: tensor<*xi32>) -> (tensor<*xi32>, tensor<*xi32>) {
# CHECK-NEXT:    %0:2 = "_tf.Identity"(%arg0) {T = "tfdtype$DT_INT32", device = "", name = "Identity"} : (tensor<*xi32>) -> (tensor<*xi32>, !_tf.control)
# CHECK-NEXT:    %1:2 = "_tf.Identity"(%arg1) {T = "tfdtype$DT_INT32", device = "", name = "Identity_1"} : (tensor<*xi32>) -> (tensor<*xi32>, !_tf.control)
# CHECK-NEXT:    return %0#0, %1#0 : tensor<*xi32>, tensor<*xi32>
# CHECK-NEXT:  }
