# RUN: tf-mlir-translate -graphdef-to-mlir %s -o - | FileCheck %s

node {
  name: "Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Enter"
  op: "Enter"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "Merge"
  op: "Merge"
  input: "Enter"
  input: "NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
# The following node also takes NextIteration node as input.
node {
  name: "Use_NextIteration_Again"
  op: "Merge"
  input: "Enter"
  input: "NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Add"
  op: "Add"
  input: "Merge"
  input: "Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "NextIteration"
  op: "NextIteration"
  input: "Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
library {
}
versions {
  producer: 62
}

# CHECK:      func @main() {
# CHECK-NEXT:   %0:2 = "_tf.NextIteration.source"() {T = "tfdtype$DT_INT32", device = "", name = "NextIteration"} : () -> (tensor<*xi32>, !_tf.control)
# CHECK-NEXT:   %1:2 = "_tf.Const"() {device = "", dtype = "tfdtype$DT_INT32", name = "Add/y", value = dense<1> : tensor<i32>} : () -> (tensor<i32>, !_tf.control)
# CHECK-NEXT:   %2:2 = "_tf.Const"() {device = "", dtype = "tfdtype$DT_INT32", name = "Const", value = dense<0> : tensor<i32>} : () -> (tensor<i32>, !_tf.control)
# CHECK-NEXT:   %3:2 = "_tf.Enter"(%2#0) {T = "tfdtype$DT_INT32", device = "", frame_name = "while_context", is_constant = false, name = "Enter", parallel_iterations = 10 : i64} : (tensor<i32>) -> (tensor<*xi32>, !_tf.control)
# CHECK-NEXT:   %4:3 = "_tf.Merge"(%3#0, %0#0) {N = 2 : i64, T = "tfdtype$DT_INT32", device = "", name = "Merge"} : (tensor<*xi32>, tensor<*xi32>) -> (tensor<*xi32>, tensor<i32>, !_tf.control)
# CHECK-NEXT:   %5:2 = "_tf.Add"(%4#0, %1#0) {T = "tfdtype$DT_INT32", device = "", name = "Add"} : (tensor<*xi32>, tensor<i32>) -> (tensor<*xi32>, !_tf.control)
# CHECK-NEXT:   %6 = "_tf.NextIteration.sink"(%5#0) {T = "tfdtype$DT_INT32", device = "", name = "NextIteration"} : (tensor<*xi32>) -> !_tf.control
# CHECK-NEXT:   %7:3 = "_tf.Merge"(%3#0, %0#0) {N = 2 : i64, T = "tfdtype$DT_INT32", device = "", name = "Use_NextIteration_Again"} : (tensor<*xi32>, tensor<*xi32>) -> (tensor<*xi32>, tensor<i32>, !_tf.control)
# CHECK-NEXT:   return
# CHECK-NEXT: }
