--- a/Eigen/src/Core/arch/GPU/PacketMath.h
+++ b/Eigen/src/Core/arch/GPU/PacketMath.h
@@ -100,6 +100,7 @@
   return make_double2(from, from);
 }
 
+#if defined(EIGEN_CUDA_ARCH)
 namespace {
 
 EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE float bitwise_and(const float& a,
@@ -211,6 +212,7 @@
 pcmp_eq<double2>(const double2& a, const double2& b) {
   return make_double2(eq_mask(a.x, b.x), eq_mask(a.y, b.y));
 }
+#endif  // EIGEN_CUDA_ARCH
 
 template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE float4 plset<float4>(const float& a) {
   return make_float4(a, a+1, a+2, a+3);
--- a/Eigen/src/Geometry/arch/Geometry_SSE.h
+++ b/Eigen/src/Geometry/arch/Geometry_SSE.h
@@ -33,13 +33,14 @@
     Packet4f b = be.template packet<BAlignment,Packet4f>(0);
     Packet4f s1 = pmul(vec4f_swizzle1(a,1,2,0,2),vec4f_swizzle1(b,2,0,1,2));
     Packet4f s2 = pmul(vec4f_swizzle1(a,3,3,3,1),vec4f_swizzle1(b,0,1,2,1));
-    pstoret<float,Packet4f,ResAlignment>(
-              &res.x(),
-              padd(psub(pmul(a,vec4f_swizzle1(b,3,3,3,3)),
-                                    pmul(vec4f_swizzle1(a,2,0,1,0),
-                                               vec4f_swizzle1(b,1,2,0,0))),
-                         pxor(mask,padd(s1,s2))));
-    
+    pstoret<float, Packet4f, ResAlignment>(
+        &res.x(),
+        padd<Packet4f>(
+            psub<Packet4f>(pmul<Packet4f>(a, vec4f_swizzle1(b, 3, 3, 3, 3)),
+                           pmul<Packet4f>(vec4f_swizzle1(a, 2, 0, 1, 0),
+                                          vec4f_swizzle1(b, 1, 2, 0, 0))),
+            pxor<Packet4f>(mask, padd(s1, s2))));
+
     return res;
   }
 };
--- a/Eigen/src/Core/arch/GPU/PacketMathHalf.h	2019-02-06 12:40:48.000000000 -0800
+++ b/Eigen/src/Core/arch/GPU/PacketMathHalf.h	2019-03-08 14:52:29.000000000 -0800
@@ -139,15 +139,23 @@
 template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE half2 pabs<half2>(const half2& a) {
   half2 result;
   unsigned temp = *(reinterpret_cast<const unsigned*>(&(a)));
-  *(reinterpret_cast<unsigned*>(&(result))) = temp & 0x7FFF7FFF;
+  *(reinterpret_cast<unsigned*>(&result)) = temp & 0x7FFF7FFF;
   return result;
 }
 
 template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE half2 ptrue<half2>(const half2& a) {
   half2 result;
-  *(reinterpret_cast<unsigned*>(&(result))) = 0xffffffffu;
+  *(reinterpret_cast<unsigned*>(&result)) = 0xffffffffu;
+  return result;
+}
+
+template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE half2 pzero<half2>(const half2& a) {
+  half2 result;
+  *(reinterpret_cast<unsigned*>(&result)) = 0x00000000u;
+  return result;
 }
 
+
 EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void
 ptranspose(PacketBlock<half2,2>& kernel) {
   __half a1 = __low2half(kernel.packet[0]);
@@ -175,6 +183,56 @@
 #endif
 }
 
+template <>
+EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE half2 pand<half2>(const half2& a,
+                                                        const half2& b) {
+  half2 result;
+  *(reinterpret_cast<unsigned*>(&result)) =
+      *(reinterpret_cast<const unsigned*>(&a)) & *(reinterpret_cast<const unsigned*>(&b));
+  return result;
+}
+
+template <>
+EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE half2 pcmp_eq<half2>(const half2& a,
+                                                           const half2& b) {
+  __half true_half = __ushort_as_half(0xffffu);
+  __half false_half = __ushort_as_half(0x0000u);
+  __half a1 = __low2half(a);
+  __half a2 = __high2half(a);
+  __half b1 = __low2half(b);
+  __half b2 = __high2half(b);
+  __half eq1 = __half2float(a1) == __half2float(b1) ? true_half : false_half;
+  __half eq2 = __half2float(a2) == __half2float(b2) ? true_half : false_half;
+  return __halves2half2(eq1, eq2);
+}
+
+template <>
+EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE half2 por<half2>(const half2& a,
+                                                       const half2& b) {
+  half2 result;
+  *(reinterpret_cast<unsigned*>(&result)) =
+      *(reinterpret_cast<const unsigned*>(&a)) | *(reinterpret_cast<const unsigned*>(&b));
+  return result;
+}
+
+template <>
+EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE half2 pxor<half2>(const half2& a,
+                                                        const half2& b) {
+  half2 result;
+  *(reinterpret_cast<unsigned*>(&result)) =
+      *(reinterpret_cast<const unsigned*>(&a)) ^ *(reinterpret_cast<const unsigned*>(&b));
+  return result;
+}
+
+template <>
+EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE half2 pandnot<half2>(const half2& a,
+                                                           const half2& b) {
+  half2 result;
+  *(reinterpret_cast<unsigned*>(&result)) =
+      *(reinterpret_cast<const unsigned*>(&a)) & ~*(reinterpret_cast<const unsigned*>(&b));
+  return result;
+}
+
 template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE half2 padd<half2>(const half2& a, const half2& b) {
 #if defined(EIGEN_HIP_DEVICE_COMPILE)
 
