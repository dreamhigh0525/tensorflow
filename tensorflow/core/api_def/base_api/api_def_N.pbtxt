op {
  graph_op_name: "Neg"
  endpoint {
    name: "Neg"
  }
  summary: "Computes numerical negative value element-wise."
  description: <<END
I.e., \\(y = -x\\).
END
}
op {
  graph_op_name: "NegTrain"
  endpoint {
    name: "NegTrain"
  }
  summary: "Training via negative sampling."
}
op {
  graph_op_name: "NextIteration"
  endpoint {
    name: "NextIteration"
  }
  summary: "Makes its input available to the next iteration."
}
op {
  graph_op_name: "NoOp"
  endpoint {
    name: "NoOp"
  }
  summary: "Does nothing. Only useful as a placeholder for control edges."
}
op {
  graph_op_name: "NonMaxSuppression"
  endpoint {
    name: "NonMaxSuppression"
  }
  summary: "Greedily selects a subset of bounding boxes in descending order of score,"
  description: <<END
pruning away boxes that have high intersection-over-union (IOU) overlap
with previously selected boxes.  Bounding boxes are supplied as
[y1, x1, y2, x2], where (y1, x1) and (y2, x2) are the coordinates of any
diagonal pair of box corners and the coordinates can be provided as normalized
(i.e., lying in the interval [0, 1]) or absolute.  Note that this algorithm
is agnostic to where the origin is in the coordinate system.  Note that this
algorithm is invariant to orthogonal transformations and translations
of the coordinate system; thus translating or reflections of the coordinate
system result in the same boxes being selected by the algorithm.
The output of this operation is a set of integers indexing into the input
collection of bounding boxes representing the selected boxes.  The bounding
box coordinates corresponding to the selected indices can then be obtained
using the `tf.gather operation`.  For example:
  selected_indices = tf.image.non_max_suppression(
      boxes, scores, max_output_size, iou_threshold)
  selected_boxes = tf.gather(boxes, selected_indices)
END
}
op {
  graph_op_name: "NonMaxSuppressionV2"
  endpoint {
    name: "NonMaxSuppressionV2"
  }
  summary: "Greedily selects a subset of bounding boxes in descending order of score,"
  description: <<END
pruning away boxes that have high intersection-over-union (IOU) overlap
with previously selected boxes.  Bounding boxes are supplied as
[y1, x1, y2, x2], where (y1, x1) and (y2, x2) are the coordinates of any
diagonal pair of box corners and the coordinates can be provided as normalized
(i.e., lying in the interval [0, 1]) or absolute.  Note that this algorithm
is agnostic to where the origin is in the coordinate system.  Note that this
algorithm is invariant to orthogonal transformations and translations
of the coordinate system; thus translating or reflections of the coordinate
system result in the same boxes being selected by the algorithm.

The output of this operation is a set of integers indexing into the input
collection of bounding boxes representing the selected boxes.  The bounding
box coordinates corresponding to the selected indices can then be obtained
using the `tf.gather operation`.  For example:

  selected_indices = tf.image.non_max_suppression_v2(
      boxes, scores, max_output_size, iou_threshold)
  selected_boxes = tf.gather(boxes, selected_indices)
END
}
op {
  graph_op_name: "NotEqual"
  endpoint {
    name: "NotEqual"
  }
  summary: "Returns the truth value of (x != y) element-wise."
  description: <<END
*NOTE*: `NotEqual` supports broadcasting. More about broadcasting
[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
END
}
