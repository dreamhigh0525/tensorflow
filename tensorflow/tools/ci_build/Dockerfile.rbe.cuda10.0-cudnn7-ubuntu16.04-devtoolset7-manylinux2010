# Dockerfile to build a manylinux 2010 compliant cross-compiler.
#
# Builds a devtoolset-7 gcc/libstdc++ that targets manylinux 2010 compatible
# glibc (2.12) and system libstdc++ (4.4).

FROM nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04 as devtoolset

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y \
      cpio \
      file \
      flex \
      g++ \
      make \
      rpm2cpio \
      unar \
      wget \
      && \
    rm -rf /var/lib/apt/lists/*


# Set up a sysroot for glibc 2.12 / libstdc++ 4.4 / devtoolset-7 in /dt7.
WORKDIR /dt7

# Download binary glibc 2.12 release.
RUN wget http://old-releases.ubuntu.com/ubuntu/pool/main/e/eglibc/libc6_2.12.1-0ubuntu6_amd64.deb && \
    unar libc6_2.12.1-0ubuntu6_amd64.deb && \
    tar xvzf libc6_2.12.1-0ubuntu6_amd64/data.tar.gz && \
    rm -rf libc6_2.12.1-0ubuntu6_amd64.deb libc6_2.12.1-0ubuntu6_amd64
RUN wget http://old-releases.ubuntu.com/ubuntu/pool/main/e/eglibc/libc6-dev_2.12.1-0ubuntu6_amd64.deb && \
    unar libc6-dev_2.12.1-0ubuntu6_amd64.deb && \
    tar xvzf libc6-dev_2.12.1-0ubuntu6_amd64/data.tar.gz && \
    rm -rf libc6-dev_2.12.1-0ubuntu6_amd64.deb libc6-dev_2.12.1-0ubuntu6_amd64

# Put the current kernel headers from ubuntu in place.
RUN ln -s /usr/include/linux /dt7/usr/include/linux
RUN ln -s /usr/include/asm-generic /dt7/usr/include/asm-generic
RUN ln -s /usr/include/x86_64-linux-gnu/asm /dt7/usr/include/asm

# Symlinks in the binary distribution are set up for installation in /usr, we
# need to fix up all the links to stay within /dt7.
ADD devtoolset/fixlinks.sh fixlinks.sh
RUN ./fixlinks.sh /dt7

# Patch to allow non-glibc 2.12 compatible builds to work.
RUN sed -i '54i#define TCP_USER_TIMEOUT 18' /dt7/usr/include/netinet/tcp.h

# Download binary libstdc++ 4.4 release.
WORKDIR /libstdc++-4.4
RUN wget http://old-releases.ubuntu.com/ubuntu/pool/main/g/gcc-4.4/libstdc++6_4.4.3-4ubuntu5_amd64.deb && \
    unar libstdc++6_4.4.3-4ubuntu5_amd64.deb && \
    tar xvzf libstdc++6_4.4.3-4ubuntu5_amd64/data.tar.gz && \
    rm -rf libstdc++6_4.4.3-4ubuntu5_amd64.deb libstdc++6_4.4.3-4ubuntu5_amd64

# We only need the shared library, as we're going to develop against the
# libstdc++ provided by devtoolset-7.
RUN cp ./usr/lib/libstdc++.so.6.0.13 /dt7/usr/lib

# Build a devtoolset-7 cross-compiler based on our glibc 2.12 sysroot setup.
WORKDIR /dts/src
RUN wget http://vault.centos.org/centos/6/sclo/Source/rh/devtoolset-7/devtoolset-7-gcc-7.3.1-5.15.el6.src.rpm
RUN rpm2cpio devtoolset-7-gcc-7.3.1-5.15.el6.src.rpm |cpio -idmv
RUN tar xvjf gcc-7.3.1-20180303.tar.bz2 --strip 1

# Apply the devtoolset patches to gcc.
ADD devtoolset/rpm-patch.sh rpm-patch.sh
RUN ./rpm-patch.sh gcc.spec

RUN ./contrib/download_prerequisites

WORKDIR /dts/build
RUN /dts/src/configure \
      --prefix=/dt7/usr \
      --with-sysroot=/dt7 \
      --disable-bootstrap \
      --disable-libmpx \
      --disable-libsanitizer \
      --disable-libunwind-exceptions \
      --disable-libunwind-exceptions \
      --disable-lto \
      --disable-multilib \
      --enable-__cxa_atexit \
      --enable-gnu-indirect-function \
      --enable-gnu-unique-object \
      --enable-initfini-array \
      --enable-languages="c,c++" \
      --enable-linker-build-id \
      --enable-plugin \
      --enable-shared \
      --enable-threads=posix \
      --with-default-libstdcxx-abi=gcc4-compatible \
      --with-gcc-major-version-only \
      --with-linker-hash-style=gnu \
      --with-tune=generic \
      && \
    make -j 42 && \
    make install

# Create the devtoolset libstdc++ linkerscript that links dynamically against
# the system libstdc++ 4.4 and provides all other symbols statically.
RUN mv /dt7/usr/lib/libstdc++.so.6.0.24 /dt7/usr/lib/libstdc++.so.6.0.24.backup
RUN echo "OUTPUT_FORMAT(elf64-x86-64)\nINPUT ( libstdc++.so.6.0.13 -lstdc++_nonshared44 )" \
    > /dt7/usr/lib/libstdc++.so.6.0.24
RUN cp ./x86_64-pc-linux-gnu/libstdc++-v3/src/.libs/libstdc++_nonshared44.a \
    /dt7/usr/lib

# Link in architecture specific includes from the system; note that we cannot
# link in the whole x86_64-linux-gnu folder, as otherwise we're overlaying
# system gcc paths that we do not want to find.
# TODO(klimek): Automate linking in all non-gcc / non-kernel include
# directories.
RUN mkdir -p /dt7/usr/include/x86_64-linux-gnu
RUN ln -s /usr/include/x86_64-linux-gnu/python3.5m /dt7/usr/include/x86_64-linux-gnu/python3.5m

# TODO(klimek): Split up into two different docker images.
FROM nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04
COPY --from=devtoolset /dt7 /dt7

# Copy and run the install scripts.
COPY install/*.sh /install/
ARG DEBIAN_FRONTEND=noninteractive
RUN /install/install_bootstrap_deb_packages.sh
RUN add-apt-repository -y ppa:openjdk-r/ppa && \
    add-apt-repository -y ppa:george-edison55/cmake-3.x
RUN /install/install_deb_packages.sh
RUN /install/install_pip_packages.sh
RUN /install/install_golang.sh
RUN /install/install_bazel.sh

# Install TensorRT.
RUN apt-get update && apt-get install -y \
    libnvinfer-dev=5.1.5-1+cuda10.0 \
    libnvinfer5=5.1.5-1+cuda10.0 \
      && \
    rm -rf /var/lib/apt/lists/*

# Build the pip package.
WORKDIR /tf
RUN git clone https://github.com/tensorflow/tensorflow .

ENV TF_NEED_GCP=1 \
    TF_NEED_HDFS=1 \
    TF_NEED_CUDA=1 \
    GCC_HOST_COMPILER_PATH=/dt7/usr/bin/gcc \
    PATH=/dt7/usr/bin:$PATH \
    PYTHON_BIN_PATH=/usr/bin/python3.5 \
    TF_NEED_TENSORRT=1

ADD devtoolset/platlib.patch platlib.patch
RUN patch -p1 < platlib.patch

RUN yes "" | ./configure

RUN bazel build --config=opt tensorflow/tools/pip_package:build_pip_package --nodistinct_host_configuration

RUN ./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tf-wheel
