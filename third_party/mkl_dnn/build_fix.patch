diff --git a/src/common/compiler_workarounds.hpp b/src/common/compiler_workarounds.hpp
index 514e54f70..a7f8a2b91 100644
--- a/src/common/compiler_workarounds.hpp
+++ b/src/common/compiler_workarounds.hpp
@@ -1,5 +1,5 @@
 /*******************************************************************************
-* Copyright 2020 Intel Corporation
+* Copyright 2020-2021 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
@@ -43,4 +43,20 @@
 #define CLANG_WA_02_SAFE_TO_USE_OMP_SIMD 1
 #endif
 
+// Workaround 03: GCC
+//
+// For very large functions with too much control flow (i.e. if, switch, goto
+// statements), GCC 7 may struggle to perform optimizations based on tree
+// dominator (i.e. -ftree-dominator-opts, which is enabled with O1), thereby
+// producing an internal compiler error (ICE). Specifically, it seems that the
+// jump threading optimization is the culprit, which cannot be disabled on its
+// own. There is no reliable way to reproduce the ICE, therefore it is not clear
+// which __GCC_MINOR__ version fixes issue.
+#if (defined __GNUC__) && (__GNUC__ == 7) && (!defined(__INTEL_COMPILER)) \
+        && (!defined(__clang__major__))
+#define GCC_WA_01_NO_TREE_DOMINATOR_OPTS 1
+#else
+#define GCC_WA_01_NO_TREE_DOMINATOR_OPTS 0
+#endif
+
 #endif // COMPILER_WORKAROUNDS_HPP
diff --git a/src/cpu/x64/gemm/amx/jit_avx512_core_amx_gemm_kern.hpp b/src/cpu/x64/gemm/amx/jit_avx512_core_amx_gemm_kern.hpp
index c6438d5ed..08987d8af 100644
--- a/src/cpu/x64/gemm/amx/jit_avx512_core_amx_gemm_kern.hpp
+++ b/src/cpu/x64/gemm/amx/jit_avx512_core_amx_gemm_kern.hpp
@@ -1,5 +1,5 @@
 /*******************************************************************************
-* Copyright 2020 Intel Corporation
+* Copyright 2020-2021 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
@@ -31,7 +31,7 @@ public:
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx512_core_amx_gemm_kern);
 
 protected:
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
     const int typea;
     const int typeb;
     const int typec;
diff --git a/src/cpu/x64/gemm/bf16/common_s16.hpp b/src/cpu/x64/gemm/bf16/common_s16.hpp
index 8b5380b6f..eb0de3a9b 100644
--- a/src/cpu/x64/gemm/bf16/common_s16.hpp
+++ b/src/cpu/x64/gemm/bf16/common_s16.hpp
@@ -1,5 +1,5 @@
 /*******************************************************************************
-* Copyright 2019-2020 Intel Corporation
+* Copyright 2019-2021 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
@@ -28,7 +28,7 @@ namespace x64 {
 
 class jit_avx512_core_s16_48x8_copy_an_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx512_core_s16_48x8_copy_an_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx512_core_s16_48x8_copy_an_kern();
@@ -36,7 +36,7 @@ public:
 
 class jit_avx512_core_s16_48x8_copy_at_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx512_core_s16_48x8_copy_at_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx512_core_s16_48x8_copy_at_kern();
@@ -44,7 +44,7 @@ public:
 
 class jit_avx512_core_s16_48x8_copy_bn_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx512_core_s16_48x8_copy_bn_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx512_core_s16_48x8_copy_bn_kern();
@@ -52,7 +52,7 @@ public:
 
 class jit_avx512_core_s16_48x8_copy_bt_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx512_core_s16_48x8_copy_bt_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx512_core_s16_48x8_copy_bt_kern();
@@ -60,7 +60,7 @@ public:
 
 class jit_avx512_core_s16_24x8_copy_an_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx512_core_s16_24x8_copy_an_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx512_core_s16_24x8_copy_an_kern();
@@ -68,7 +68,7 @@ public:
 
 class jit_avx512_core_s16_24x8_copy_at_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx512_core_s16_24x8_copy_at_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx512_core_s16_24x8_copy_at_kern();
@@ -76,7 +76,7 @@ public:
 
 class jit_avx512_core_s16_24x8_copy_bn_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx512_core_s16_24x8_copy_bn_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx512_core_s16_24x8_copy_bn_kern();
@@ -84,7 +84,7 @@ public:
 
 class jit_avx512_core_s16_24x8_copy_bt_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx512_core_s16_24x8_copy_bt_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx512_core_s16_24x8_copy_bt_kern();
diff --git a/src/cpu/x64/gemm/bf16/jit_avx512_core_gemm_bf16bf16f32_kern.hpp b/src/cpu/x64/gemm/bf16/jit_avx512_core_gemm_bf16bf16f32_kern.hpp
index 37c8a4570..5362409a4 100644
--- a/src/cpu/x64/gemm/bf16/jit_avx512_core_gemm_bf16bf16f32_kern.hpp
+++ b/src/cpu/x64/gemm/bf16/jit_avx512_core_gemm_bf16bf16f32_kern.hpp
@@ -1,5 +1,5 @@
 /*******************************************************************************
-* Copyright 2019-2020 Intel Corporation
+* Copyright 2019-2021 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
@@ -58,7 +58,7 @@ protected:
     void innerloop(int unroll_m, int unroll_n);
     void outerloop(int unroll_x, int unroll_y, Xbyak::Label *&outerloop_label);
 
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 private:
     static const int UNROLL_N_ = 8;
diff --git a/src/cpu/x64/gemm/bf16/jit_avx512_core_gemv_bf16bf16f32_kern.hpp b/src/cpu/x64/gemm/bf16/jit_avx512_core_gemv_bf16bf16f32_kern.hpp
index 8fab51c96..c7418ce76 100644
--- a/src/cpu/x64/gemm/bf16/jit_avx512_core_gemv_bf16bf16f32_kern.hpp
+++ b/src/cpu/x64/gemm/bf16/jit_avx512_core_gemv_bf16bf16f32_kern.hpp
@@ -1,5 +1,5 @@
 /*******************************************************************************
-* Copyright 2020 Intel Corporation
+* Copyright 2020-2021 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
@@ -52,7 +52,7 @@ protected:
     void outerloop(int unroll_y, Xbyak::Label *&cur_outerloop_label,
             Xbyak::Label *&outerloop_end_label);
 
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 private:
     static const int UNROLL_M_ = 64;
diff --git a/src/cpu/x64/gemm/f32/common_f32.hpp b/src/cpu/x64/gemm/f32/common_f32.hpp
index d6d60764f..0b7a80173 100644
--- a/src/cpu/x64/gemm/f32/common_f32.hpp
+++ b/src/cpu/x64/gemm/f32/common_f32.hpp
@@ -1,5 +1,5 @@
 /*******************************************************************************
-* Copyright 2019-2020 Intel Corporation
+* Copyright 2019-2021 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@ namespace x64 {
 
 class jit_avx512_core_f32_copy_an_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx512_core_f32_copy_an_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx512_core_f32_copy_an_kern();
@@ -37,7 +37,7 @@ public:
 
 class jit_avx512_core_f32_copy_at_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx512_core_f32_copy_at_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx512_core_f32_copy_at_kern();
@@ -45,7 +45,7 @@ public:
 
 class jit_avx512_core_f32_copy_bn_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx512_core_f32_copy_bn_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx512_core_f32_copy_bn_kern();
@@ -53,7 +53,7 @@ public:
 
 class jit_avx512_core_f32_copy_bt_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx512_core_f32_copy_bt_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx512_core_f32_copy_bt_kern();
@@ -61,7 +61,7 @@ public:
 
 class jit_avx2_f32_copy_an_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx2_f32_copy_an_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx2_f32_copy_an_kern();
@@ -69,7 +69,7 @@ public:
 
 class jit_avx2_f32_copy_at_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx2_f32_copy_at_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx2_f32_copy_at_kern();
@@ -77,7 +77,7 @@ public:
 
 class jit_avx2_f32_copy_bn_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx2_f32_copy_bn_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx2_f32_copy_bn_kern();
@@ -85,7 +85,7 @@ public:
 
 class jit_avx2_f32_copy_bt_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx2_f32_copy_bt_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx2_f32_copy_bt_kern();
@@ -93,7 +93,7 @@ public:
 
 class jit_avx_f32_copy_an_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx_f32_copy_an_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx_f32_copy_an_kern();
@@ -101,7 +101,7 @@ public:
 
 class jit_avx_f32_copy_at_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx_f32_copy_at_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx_f32_copy_at_kern();
@@ -109,7 +109,7 @@ public:
 
 class jit_avx_f32_copy_bn_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx_f32_copy_bn_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx_f32_copy_bn_kern();
@@ -117,7 +117,7 @@ public:
 
 class jit_avx_f32_copy_bt_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx_f32_copy_bt_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx_f32_copy_bt_kern();
@@ -125,7 +125,7 @@ public:
 
 class jit_avx_kernel_b0_sgemm_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx_kernel_b0_sgemm_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx_kernel_b0_sgemm_kern();
@@ -133,7 +133,7 @@ public:
 
 class jit_avx_kernel_sgemm_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx_kernel_sgemm_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx_kernel_sgemm_kern();
@@ -141,7 +141,7 @@ public:
 
 class jit_sse41_f32_copy_an_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_sse41_f32_copy_an_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_sse41_f32_copy_an_kern();
@@ -149,7 +149,7 @@ public:
 
 class jit_sse41_f32_copy_at_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_sse41_f32_copy_at_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_sse41_f32_copy_at_kern();
@@ -157,7 +157,7 @@ public:
 
 class jit_sse41_f32_copy_bn_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_sse41_f32_copy_bn_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_sse41_f32_copy_bn_kern();
@@ -165,7 +165,7 @@ public:
 
 class jit_sse41_f32_copy_bt_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_sse41_f32_copy_bt_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_sse41_f32_copy_bt_kern();
@@ -173,7 +173,7 @@ public:
 
 class jit_sse41_kernel_b0_sgemm_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_sse41_kernel_b0_sgemm_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_sse41_kernel_b0_sgemm_kern();
@@ -181,7 +181,7 @@ public:
 
 class jit_sse41_kernel_sgemm_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_sse41_kernel_sgemm_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_sse41_kernel_sgemm_kern();
diff --git a/src/cpu/x64/gemm/f32/jit_avx2_kernel_sgemm_kern.hpp b/src/cpu/x64/gemm/f32/jit_avx2_kernel_sgemm_kern.hpp
index 19d5336c4..2e6bcff14 100644
--- a/src/cpu/x64/gemm/f32/jit_avx2_kernel_sgemm_kern.hpp
+++ b/src/cpu/x64/gemm/f32/jit_avx2_kernel_sgemm_kern.hpp
@@ -1,5 +1,5 @@
 /*******************************************************************************
-* Copyright 2019-2020 Intel Corporation
+* Copyright 2019-2021 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
@@ -68,7 +68,7 @@ class jit_avx2_kernel_sgemm_kern : public jit_generator {
     void prefetchA_beforeFMA(int um, int un, int k_idx, int n_idx, int m_idx);
     void prefetchC_afterBload(int um, int un, int k_idx, int n_idx);
     void prefetchC_beforeKloop(int um);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
     template <typename T_reg, typename T_desta, typename T_srca>
     void loadA_betweenFMAs(int um, int un, int k_idx, int n_idx, int m_idx,
diff --git a/src/cpu/x64/gemm/f32/jit_avx512_common_gemm_f32.cpp b/src/cpu/x64/gemm/f32/jit_avx512_common_gemm_f32.cpp
index 4035cf57a..296dbbc06 100644
--- a/src/cpu/x64/gemm/f32/jit_avx512_common_gemm_f32.cpp
+++ b/src/cpu/x64/gemm/f32/jit_avx512_common_gemm_f32.cpp
@@ -68,7 +68,7 @@ struct xbyak_gemm_t : public jit_generator {
         , beta(beta)
         , hasBias(hasBias) {}
 
-    void generate() override {
+    void generate() override ATTRIBUTE_OPTIMIZE {
         using namespace Xbyak;
 
         enum {
diff --git a/src/cpu/x64/gemm/f32/jit_avx512_core_gemm_smalln_tn_f32_kern.cpp b/src/cpu/x64/gemm/f32/jit_avx512_core_gemm_smalln_tn_f32_kern.cpp
index e9d8d3f76..2878a9215 100644
--- a/src/cpu/x64/gemm/f32/jit_avx512_core_gemm_smalln_tn_f32_kern.cpp
+++ b/src/cpu/x64/gemm/f32/jit_avx512_core_gemm_smalln_tn_f32_kern.cpp
@@ -1,5 +1,5 @@
 /*******************************************************************************
-* Copyright 2020 Intel Corporation
+* Copyright 2020-2021 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
@@ -47,7 +47,7 @@ struct xbyak_gemm_smalln_tn_t : public jit_generator {
             size_t code_size = 80 * Xbyak::DEFAULT_MAX_CODE_SIZE)
         : jit_generator(code_ptr, code_size), N(N), beta(beta), alpha(alpha) {}
 
-    void generate() override {
+    void generate() override ATTRIBUTE_OPTIMIZE {
         using namespace Xbyak;
         /**
          * numN = 1 : 16 rows of A, 1x16 accumulators
diff --git a/src/cpu/x64/gemm/f32/jit_avx_gemm_f32.cpp b/src/cpu/x64/gemm/f32/jit_avx_gemm_f32.cpp
index c67140b50..d15f5b199 100644
--- a/src/cpu/x64/gemm/f32/jit_avx_gemm_f32.cpp
+++ b/src/cpu/x64/gemm/f32/jit_avx_gemm_f32.cpp
@@ -66,7 +66,7 @@ struct xbyak_gemm_t : public jit_generator {
         , beta(beta)
         , hasBias(hasBias) {}
 
-    void generate() override {
+    void generate() override ATTRIBUTE_OPTIMIZE {
         using namespace Xbyak;
 
         const bool is_avx2 = mayiuse(avx2);
diff --git a/src/cpu/x64/gemm/f32/jit_avx_gemv_t_f32_kern.hpp b/src/cpu/x64/gemm/f32/jit_avx_gemv_t_f32_kern.hpp
index 65e50514b..1ed21b708 100644
--- a/src/cpu/x64/gemm/f32/jit_avx_gemv_t_f32_kern.hpp
+++ b/src/cpu/x64/gemm/f32/jit_avx_gemv_t_f32_kern.hpp
@@ -1,5 +1,5 @@
 /*******************************************************************************
-* Copyright 2019-2020 Intel Corporation
+* Copyright 2019-2021 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
@@ -40,7 +40,7 @@ protected:
     void innerloop(int unroll_m, int unroll_n);
     void outerloop(int unroll_x, int unroll_y, Xbyak::Label *&outerloop_label);
 
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 private:
     static const int M_UNROLL_ = 16;
diff --git a/src/cpu/x64/gemm/f32/jit_sse41_gemv_t_f32_kern.hpp b/src/cpu/x64/gemm/f32/jit_sse41_gemv_t_f32_kern.hpp
index 467c5553f..8a32fb4be 100644
--- a/src/cpu/x64/gemm/f32/jit_sse41_gemv_t_f32_kern.hpp
+++ b/src/cpu/x64/gemm/f32/jit_sse41_gemv_t_f32_kern.hpp
@@ -1,5 +1,5 @@
 /*******************************************************************************
-* Copyright 2019-2020 Intel Corporation
+* Copyright 2019-2021 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
@@ -38,7 +38,7 @@ protected:
     void innerloop(int unroll_m, int unroll_n);
     void outerloop(int unroll_x, int unroll_y, Xbyak::Label *&outerloop_label);
 
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 private:
     static const int M_UNROLL_ = 8;
diff --git a/src/cpu/x64/gemm/s8x8s32/common_u8.hpp b/src/cpu/x64/gemm/s8x8s32/common_u8.hpp
index 3f6392fe8..1ab525df6 100644
--- a/src/cpu/x64/gemm/s8x8s32/common_u8.hpp
+++ b/src/cpu/x64/gemm/s8x8s32/common_u8.hpp
@@ -1,5 +1,5 @@
 /*******************************************************************************
-* Copyright 2019-2020 Intel Corporation
+* Copyright 2019-2021 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
@@ -35,7 +35,7 @@ namespace x64 {
 
 class jit_avx512_core_u8_copy_an_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx512_core_u8_copy_an_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx512_core_u8_copy_an_kern();
@@ -43,7 +43,7 @@ public:
 
 class jit_avx512_core_u8_copy_at_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx512_core_u8_copy_at_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx512_core_u8_copy_at_kern();
@@ -51,7 +51,7 @@ public:
 
 class jit_avx512_core_u8_copy_bn_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx512_core_u8_copy_bn_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
     bool s8_case;
 
 public:
@@ -60,7 +60,7 @@ public:
 
 class jit_avx512_core_u8_copy_bt_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx512_core_u8_copy_bt_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
     bool s8_case;
 
 public:
@@ -69,7 +69,7 @@ public:
 
 class jit_avx512_core_u8_copy_sum_an_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx512_core_u8_copy_sum_an_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx512_core_u8_copy_sum_an_kern();
@@ -77,7 +77,7 @@ public:
 
 class jit_avx512_core_u8_copy_sum_at_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx512_core_u8_copy_sum_at_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx512_core_u8_copy_sum_at_kern();
@@ -85,7 +85,7 @@ public:
 
 class jit_avx512_core_u8_copy_sum_bn_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx512_core_u8_copy_sum_bn_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
     bool s8_case;
 
 public:
@@ -94,7 +94,7 @@ public:
 
 class jit_avx512_core_u8_copy_sum_bt_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx512_core_u8_copy_sum_bt_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
     bool s8_case;
 
 public:
@@ -103,7 +103,7 @@ public:
 
 class jit_avx2_vnni_u8_copy_an_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx2_vnni_u8_copy_an_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx2_vnni_u8_copy_an_kern();
@@ -111,7 +111,7 @@ public:
 
 class jit_avx2_vnni_u8_copy_at_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx2_vnni_u8_copy_at_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx2_vnni_u8_copy_at_kern();
@@ -119,7 +119,7 @@ public:
 
 class jit_avx2_vnni_u8_copy_bn_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx2_vnni_u8_copy_bn_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx2_vnni_u8_copy_bn_kern();
@@ -127,7 +127,7 @@ public:
 
 class jit_avx2_vnni_u8_copy_bt_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx2_vnni_u8_copy_bt_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx2_vnni_u8_copy_bt_kern();
@@ -135,7 +135,7 @@ public:
 
 class jit_avx2_vnni_u8_copy_sum_an_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx2_vnni_u8_copy_sum_an_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx2_vnni_u8_copy_sum_an_kern();
@@ -143,7 +143,7 @@ public:
 
 class jit_avx2_vnni_u8_copy_sum_at_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx2_vnni_u8_copy_sum_at_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx2_vnni_u8_copy_sum_at_kern();
@@ -151,7 +151,7 @@ public:
 
 class jit_avx2_vnni_u8_copy_sum_bn_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx2_vnni_u8_copy_sum_bn_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx2_vnni_u8_copy_sum_bn_kern();
@@ -159,7 +159,7 @@ public:
 
 class jit_avx2_vnni_u8_copy_sum_bt_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx2_vnni_u8_copy_sum_bt_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx2_vnni_u8_copy_sum_bt_kern();
@@ -167,7 +167,7 @@ public:
 
 class jit_avx2_u8_copy_an_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx2_u8_copy_an_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx2_u8_copy_an_kern();
@@ -175,7 +175,7 @@ public:
 
 class jit_avx2_u8_copy_at_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx2_u8_copy_at_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx2_u8_copy_at_kern();
@@ -183,7 +183,7 @@ public:
 
 class jit_avx2_u8_copy_bn_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx2_u8_copy_bn_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx2_u8_copy_bn_kern();
@@ -191,7 +191,7 @@ public:
 
 class jit_avx2_u8_copy_bt_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx2_u8_copy_bt_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx2_u8_copy_bt_kern();
@@ -199,7 +199,7 @@ public:
 
 class jit_avx2_u8_copy_sum_an_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx2_u8_copy_sum_an_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx2_u8_copy_sum_an_kern();
@@ -207,7 +207,7 @@ public:
 
 class jit_avx2_u8_copy_sum_at_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx2_u8_copy_sum_at_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx2_u8_copy_sum_at_kern();
@@ -215,7 +215,7 @@ public:
 
 class jit_avx2_u8_copy_sum_bn_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx2_u8_copy_sum_bn_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx2_u8_copy_sum_bn_kern();
@@ -223,7 +223,7 @@ public:
 
 class jit_avx2_u8_copy_sum_bt_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx2_u8_copy_sum_bt_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx2_u8_copy_sum_bt_kern();
@@ -231,7 +231,7 @@ public:
 
 class jit_avx_u8_copy_an_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx_u8_copy_an_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx_u8_copy_an_kern();
@@ -239,7 +239,7 @@ public:
 
 class jit_avx_u8_copy_at_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx_u8_copy_at_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx_u8_copy_at_kern();
@@ -247,7 +247,7 @@ public:
 
 class jit_avx_u8_copy_bn_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx_u8_copy_bn_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx_u8_copy_bn_kern();
@@ -255,7 +255,7 @@ public:
 
 class jit_avx_u8_copy_bt_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx_u8_copy_bt_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx_u8_copy_bt_kern();
@@ -263,7 +263,7 @@ public:
 
 class jit_avx_u8_copy_sum_an_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx_u8_copy_sum_an_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx_u8_copy_sum_an_kern();
@@ -271,7 +271,7 @@ public:
 
 class jit_avx_u8_copy_sum_at_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx_u8_copy_sum_at_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx_u8_copy_sum_at_kern();
@@ -279,7 +279,7 @@ public:
 
 class jit_avx_u8_copy_sum_bn_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx_u8_copy_sum_bn_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx_u8_copy_sum_bn_kern();
@@ -287,7 +287,7 @@ public:
 
 class jit_avx_u8_copy_sum_bt_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx_u8_copy_sum_bt_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx_u8_copy_sum_bt_kern();
@@ -295,7 +295,7 @@ public:
 
 class jit_avx_kernel_b0_gemm_s8u8s32_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx_kernel_b0_gemm_s8u8s32_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx_kernel_b0_gemm_s8u8s32_kern();
@@ -303,7 +303,7 @@ public:
 
 class jit_avx_kernel_b0_b_gemm_s8u8s32_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx_kernel_b0_b_gemm_s8u8s32_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx_kernel_b0_b_gemm_s8u8s32_kern();
@@ -311,7 +311,7 @@ public:
 
 class jit_avx_kernel_b0_r_gemm_s8u8s32_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx_kernel_b0_r_gemm_s8u8s32_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx_kernel_b0_r_gemm_s8u8s32_kern();
@@ -319,7 +319,7 @@ public:
 
 class jit_avx_kernel_b0_c_gemm_s8u8s32_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx_kernel_b0_c_gemm_s8u8s32_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx_kernel_b0_c_gemm_s8u8s32_kern();
@@ -327,7 +327,7 @@ public:
 
 class jit_avx_kernel_gemm_s8u8s32_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx_kernel_gemm_s8u8s32_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx_kernel_gemm_s8u8s32_kern();
@@ -335,7 +335,7 @@ public:
 
 class jit_avx_kernel_b_gemm_s8u8s32_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx_kernel_b_gemm_s8u8s32_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx_kernel_b_gemm_s8u8s32_kern();
@@ -343,7 +343,7 @@ public:
 
 class jit_avx_kernel_r_gemm_s8u8s32_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx_kernel_r_gemm_s8u8s32_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx_kernel_r_gemm_s8u8s32_kern();
@@ -351,7 +351,7 @@ public:
 
 class jit_avx_kernel_c_gemm_s8u8s32_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_avx_kernel_c_gemm_s8u8s32_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_avx_kernel_c_gemm_s8u8s32_kern();
@@ -359,7 +359,7 @@ public:
 
 class jit_sse41_u8_copy_an_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_sse41_u8_copy_an_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_sse41_u8_copy_an_kern();
@@ -367,7 +367,7 @@ public:
 
 class jit_sse41_u8_copy_at_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_sse41_u8_copy_at_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_sse41_u8_copy_at_kern();
@@ -375,7 +375,7 @@ public:
 
 class jit_sse41_u8_copy_bn_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_sse41_u8_copy_bn_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_sse41_u8_copy_bn_kern();
@@ -383,7 +383,7 @@ public:
 
 class jit_sse41_u8_copy_bt_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_sse41_u8_copy_bt_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_sse41_u8_copy_bt_kern();
@@ -391,7 +391,7 @@ public:
 
 class jit_sse41_u8_copy_sum_an_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_sse41_u8_copy_sum_an_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_sse41_u8_copy_sum_an_kern();
@@ -399,7 +399,7 @@ public:
 
 class jit_sse41_u8_copy_sum_at_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_sse41_u8_copy_sum_at_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_sse41_u8_copy_sum_at_kern();
@@ -407,7 +407,7 @@ public:
 
 class jit_sse41_u8_copy_sum_bn_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_sse41_u8_copy_sum_bn_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_sse41_u8_copy_sum_bn_kern();
@@ -415,7 +415,7 @@ public:
 
 class jit_sse41_u8_copy_sum_bt_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_sse41_u8_copy_sum_bt_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_sse41_u8_copy_sum_bt_kern();
@@ -423,7 +423,7 @@ public:
 
 class jit_sse41_kernel_b0_gemm_s8u8s32_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_sse41_kernel_b0_gemm_s8u8s32_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_sse41_kernel_b0_gemm_s8u8s32_kern();
@@ -431,7 +431,7 @@ public:
 
 class jit_sse41_kernel_b0_b_gemm_s8u8s32_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_sse41_kernel_b0_b_gemm_s8u8s32_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_sse41_kernel_b0_b_gemm_s8u8s32_kern();
@@ -439,7 +439,7 @@ public:
 
 class jit_sse41_kernel_b0_r_gemm_s8u8s32_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_sse41_kernel_b0_r_gemm_s8u8s32_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_sse41_kernel_b0_r_gemm_s8u8s32_kern();
@@ -447,7 +447,7 @@ public:
 
 class jit_sse41_kernel_b0_c_gemm_s8u8s32_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_sse41_kernel_b0_c_gemm_s8u8s32_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_sse41_kernel_b0_c_gemm_s8u8s32_kern();
@@ -455,7 +455,7 @@ public:
 
 class jit_sse41_kernel_gemm_s8u8s32_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_sse41_kernel_gemm_s8u8s32_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_sse41_kernel_gemm_s8u8s32_kern();
@@ -463,7 +463,7 @@ public:
 
 class jit_sse41_kernel_b_gemm_s8u8s32_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_sse41_kernel_b_gemm_s8u8s32_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_sse41_kernel_b_gemm_s8u8s32_kern();
@@ -471,7 +471,7 @@ public:
 
 class jit_sse41_kernel_r_gemm_s8u8s32_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_sse41_kernel_r_gemm_s8u8s32_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_sse41_kernel_r_gemm_s8u8s32_kern();
@@ -479,7 +479,7 @@ public:
 
 class jit_sse41_kernel_c_gemm_s8u8s32_kern : public jit_generator {
     DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_sse41_kernel_c_gemm_s8u8s32_kern);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 public:
     jit_sse41_kernel_c_gemm_s8u8s32_kern();
diff --git a/src/cpu/x64/gemm/s8x8s32/jit_avx2_gemm_s8u8s32_kern.hpp b/src/cpu/x64/gemm/s8x8s32/jit_avx2_gemm_s8u8s32_kern.hpp
index 8e2afbdcc..122150d0e 100644
--- a/src/cpu/x64/gemm/s8x8s32/jit_avx2_gemm_s8u8s32_kern.hpp
+++ b/src/cpu/x64/gemm/s8x8s32/jit_avx2_gemm_s8u8s32_kern.hpp
@@ -1,5 +1,5 @@
 /*******************************************************************************
-* Copyright 2018-2020 Intel Corporation
+* Copyright 2018-2021 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
@@ -51,7 +51,7 @@ protected:
     void innerloop(int unroll_m, int unroll_n);
     void outerloop(int unroll_x, int unroll_y, Xbyak::Label *&outerloop_label);
 
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 private:
     static const int IGEMM_UNROLL_N_ = 4;
diff --git a/src/cpu/x64/gemm/s8x8s32/jit_avx512_core_gemm_s8u8s32_kern.hpp b/src/cpu/x64/gemm/s8x8s32/jit_avx512_core_gemm_s8u8s32_kern.hpp
index b9af75a85..80d6afd36 100644
--- a/src/cpu/x64/gemm/s8x8s32/jit_avx512_core_gemm_s8u8s32_kern.hpp
+++ b/src/cpu/x64/gemm/s8x8s32/jit_avx512_core_gemm_s8u8s32_kern.hpp
@@ -1,5 +1,5 @@
 /*******************************************************************************
-* Copyright 2018-2020 Intel Corporation
+* Copyright 2018-2021 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
@@ -50,7 +50,7 @@ protected:
     void innerloop(int unroll_m, int unroll_n);
     void outerloop(int unroll_x, int unroll_y, Xbyak::Label *&outerloop_label);
 
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
 private:
     static const int IGEMM_UNROLL_M_ = 48;
diff --git a/src/cpu/x64/gemm/s8x8s32/jit_avx512_core_kernel_gemv_s8x8s32_kern.hpp b/src/cpu/x64/gemm/s8x8s32/jit_avx512_core_kernel_gemv_s8x8s32_kern.hpp
index da6730586..6d6ad3e68 100644
--- a/src/cpu/x64/gemm/s8x8s32/jit_avx512_core_kernel_gemv_s8x8s32_kern.hpp
+++ b/src/cpu/x64/gemm/s8x8s32/jit_avx512_core_kernel_gemv_s8x8s32_kern.hpp
@@ -1,5 +1,5 @@
 /*******************************************************************************
-* Copyright 2019-2020 Intel Corporation
+* Copyright 2019-2021 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
@@ -44,7 +44,7 @@ class jit_avx512_core_gemv_s8x8s32_kern : public jit_generator {
     void shuffle_and_add(
             Xbyak::Zmm, Xbyak::Zmm, Xbyak::Zmm, Xbyak::Zmm, Xbyak::Zmm);
     void update_c(int, Xbyak::Reg64, int, Xbyak::Opmask);
-    void generate() override;
+    void generate() override ATTRIBUTE_OPTIMIZE;
 
     cpu_isa_t isa = isa_any;
     ver_t ver = ver_t::undef;
diff --git a/src/cpu/x64/jit_generator.hpp b/src/cpu/x64/jit_generator.hpp
index 72102ea65..03ffc4bff 100644
--- a/src/cpu/x64/jit_generator.hpp
+++ b/src/cpu/x64/jit_generator.hpp
@@ -20,6 +20,7 @@
 #include <limits.h>
 
 #include "common/bit_cast.hpp"
+#include "common/compiler_workarounds.hpp"
 #include "common/type_helpers.hpp"
 #include "common/utils.hpp"
 
@@ -37,6 +38,12 @@
 #define OFFSET_SHADOWSPACE 0x28
 #endif
 
+#if GCC_WA_01_NO_TREE_DOMINATOR_OPTS
+#define ATTRIBUTE_OPTIMIZE __attribute__((optimize("no-tree-dominator-opts")))
+#else
+#define ATTRIBUTE_OPTIMIZE
+#endif
+
 #define DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_name) \
     const char *name() const override { return STRINGIFY(jit_name); } \
     const char *source_file() const override { return __FILE__; }
diff -u a/src/cpu/x64/jit_avx512_core_amx_convolution.cpp b/src/cpu/x64/jit_avx512_core_amx_convolution.cpp
--- a/src/cpu/x64/jit_avx512_core_amx_convolution.cpp
+++ b/src/cpu/x64/jit_avx512_core_amx_convolution.cpp
@@ -38,10 +38,14 @@
     (pd()->with_groups() ? (d).blk_off((g), __VA_ARGS__) \
                          : (d).blk_off(__VA_ARGS__))

-#define mem_blk_off(md, ndims, n, c, d, h, w) \
-    (ndims) == 3 ? (md).blk_off((n), (c), (w)) \
-                 : (ndims) == 4 ? (md).blk_off((n), (c), (h), (w)) \
-                                : (md).blk_off((n), (c), (d), (h), (w))
+inline int mem_blk_off(const memory_desc_wrapper& md, int ndims, int n, int c,
+                       int d, int h, int w) {
+  switch (ndims) {
+    case 3: return md.blk_off((n), (c), (w));
+    case 4: return md.blk_off((n), (c), (h), (w));
+    default: return md.blk_off((n), (c), (d), (h), (w));
+  }
+}

 template <data_type_t src_type, data_type_t wei_type, data_type_t dst_type>
 void jit_avx512_core_amx_convolution_fwd_t<src_type, wei_type,
diff -u a/src/cpu/x64/jit_avx512_core_amx_1x1_convolution.cpp b/src/cpu/x64/jit_avx512_core_amx_1x1_convolution.cpp
--- a/src/cpu/x64/jit_avx512_core_amx_1x1_convolution.cpp
+++ b/src/cpu/x64/jit_avx512_core_amx_1x1_convolution.cpp
@@ -38,10 +38,14 @@
     (pd()->with_groups() ? (d).blk_off((g), __VA_ARGS__) \
                          : (d).blk_off(__VA_ARGS__))

-#define md_blk_off(md, ndims, n, c, d, h, w) \
-    (ndims) == 3 ? (md).blk_off((n), (c), (w)) \
-                 : (ndims) == 4 ? (md).blk_off((n), (c), (h), (w)) \
-                                : (md).blk_off((n), (c), (d), (h), (w));
+inline int md_blk_off(const memory_desc_wrapper& md, int ndims, int n, int c,
+                       int d, int h, int w) {
+  switch (ndims) {
+    case 3: return md.blk_off((n), (c), (w));
+    case 4: return md.blk_off((n), (c), (h), (w));
+    default: return md.blk_off((n), (c), (d), (h), (w));
+  }
+}

 template <data_type_t src_type, data_type_t wei_type, data_type_t dst_type>
 void jit_avx512_core_amx_1x1_convolution_fwd_t<src_type, wei_type,
