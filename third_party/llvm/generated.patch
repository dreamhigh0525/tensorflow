Auto generated patch. Do not edit or delete it, even if empty.
diff -ruN --strip-trailing-cr a/lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp b/lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp
--- a/lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp
+++ b/lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp
@@ -3304,11 +3304,6 @@
       try_parsing_type = false;
       break;
 
-    case DW_TAG_imported_declaration:
-      decl_ctx = ResolveImportedDeclarationDIE(die);
-      try_parsing_type = false;
-      break;
-
     case DW_TAG_lexical_block:
       decl_ctx = GetDeclContextForBlock(die);
       try_parsing_type = false;
@@ -3470,42 +3465,6 @@
   return nullptr;
 }
 
-clang::NamespaceDecl *
-DWARFASTParserClang::ResolveImportedDeclarationDIE(const DWARFDIE &die) {
-  assert(die && die.Tag() == DW_TAG_imported_declaration);
-
-  // See if we cached a NamespaceDecl for this imported declaration
-  // already
-  auto it = m_die_to_decl_ctx.find(die.GetDIE());
-  if (it != m_die_to_decl_ctx.end())
-    return static_cast<clang::NamespaceDecl *>(it->getSecond());
-
-  clang::NamespaceDecl *namespace_decl = nullptr;
-
-  const DWARFDIE imported_uid =
-      die.GetAttributeValueAsReferenceDIE(DW_AT_import);
-  if (!imported_uid)
-    return nullptr;
-
-  switch (imported_uid.Tag()) {
-  case DW_TAG_imported_declaration:
-    namespace_decl = ResolveImportedDeclarationDIE(imported_uid);
-    break;
-  case DW_TAG_namespace:
-    namespace_decl = ResolveNamespaceDIE(imported_uid);
-    break;
-  default:
-    return nullptr;
-  }
-
-  if (!namespace_decl)
-    return nullptr;
-
-  LinkDeclContextToDIE(namespace_decl, die);
-
-  return namespace_decl;
-}
-
 clang::DeclContext *DWARFASTParserClang::GetClangDeclContextContainingDIE(
     const DWARFDIE &die, DWARFDIE *decl_ctx_die_copy) {
   SymbolFileDWARF *dwarf = die.GetDWARF();
diff -ruN --strip-trailing-cr a/lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.h b/lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.h
--- a/lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.h
+++ b/lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.h
@@ -132,17 +132,6 @@
 
   clang::NamespaceDecl *ResolveNamespaceDIE(const DWARFDIE &die);
 
-  /// Returns the namespace decl that a DW_TAG_imported_declaration imports.
-  ///
-  /// \param[in] die The import declaration to resolve. If the DIE is not a
-  ///                DW_TAG_imported_declaration the behaviour is undefined.
-  ///
-  /// \returns The decl corresponding to the namespace that the specified
-  ///          'die' imports. If the imported entity is not a namespace
-  ///          or another import declaration, returns nullptr. If an error
-  ///          occurs, returns nullptr.
-  clang::NamespaceDecl *ResolveImportedDeclarationDIE(const DWARFDIE &die);
-
   bool ParseTemplateDIE(const DWARFDIE &die,
                         lldb_private::TypeSystemClang::TemplateParameterInfos
                             &template_param_infos);
diff -ruN --strip-trailing-cr a/lldb/test/API/commands/expression/namespace-alias/main.cpp b/lldb/test/API/commands/expression/namespace-alias/main.cpp
--- a/lldb/test/API/commands/expression/namespace-alias/main.cpp
+++ b/lldb/test/API/commands/expression/namespace-alias/main.cpp
@@ -1,21 +0,0 @@
-namespace A {
-inline namespace _A {
-namespace B {
-namespace C {
-int a = -1;
-
-int func() { return 0; }
-} // namespace C
-} // namespace B
-
-namespace C = B::C;
-namespace D = B::C;
-
-} // namespace _A
-} // namespace A
-
-namespace E = A;
-namespace F = E::C;
-namespace G = F;
-
-int main(int argc, char **argv) { return A::B::C::a; }
diff -ruN --strip-trailing-cr a/lldb/test/API/commands/expression/namespace-alias/Makefile b/lldb/test/API/commands/expression/namespace-alias/Makefile
--- a/lldb/test/API/commands/expression/namespace-alias/Makefile
+++ b/lldb/test/API/commands/expression/namespace-alias/Makefile
@@ -1,3 +0,0 @@
-CXX_SOURCES := main.cpp
-
-include Makefile.rules
diff -ruN --strip-trailing-cr a/lldb/test/API/commands/expression/namespace-alias/TestInlineNamespaceAlias.py b/lldb/test/API/commands/expression/namespace-alias/TestInlineNamespaceAlias.py
--- a/lldb/test/API/commands/expression/namespace-alias/TestInlineNamespaceAlias.py
+++ b/lldb/test/API/commands/expression/namespace-alias/TestInlineNamespaceAlias.py
@@ -1,29 +0,0 @@
-"""
-Test that we correctly handle namespace
-expression evaluation through namespace
-aliases.
-"""
-
-import lldb
-
-from lldbsuite.test.decorators import *
-from lldbsuite.test.lldbtest import *
-from lldbsuite.test import lldbutil
-
-class TestInlineNamespace(TestBase):
-    def test(self):
-        self.build()
-
-        lldbutil.run_to_source_breakpoint(self,
-                                          "return A::B::C::a", lldb.SBFileSpec("main.cpp"))
-
-        self.expect_expr("A::C::a", result_type="int", result_value="-1")
-        self.expect_expr("A::D::a", result_type="int", result_value="-1")
-
-        self.expect_expr("A::C::func()", result_type="int", result_value="0")
-        self.expect_expr("A::D::func()", result_type="int", result_value="0")
-
-        self.expect_expr("E::C::a", result_type="int", result_value="-1")
-        self.expect_expr("E::D::a", result_type="int", result_value="-1")
-        self.expect_expr("F::a", result_type="int", result_value="-1")
-        self.expect_expr("G::a", result_type="int", result_value="-1")
diff -ruN --strip-trailing-cr a/llvm/lib/DWARFLinker/DWARFLinker.cpp b/llvm/lib/DWARFLinker/DWARFLinker.cpp
--- a/llvm/lib/DWARFLinker/DWARFLinker.cpp
+++ b/llvm/lib/DWARFLinker/DWARFLinker.cpp
@@ -1589,8 +1589,6 @@
     if (!AttrInfo.Name)
       AttrInfo.Name = StringPool.getEntry("(anonymous namespace)");
     Unit.addNamespaceAccelerator(Die, AttrInfo.Name);
-  } else if (Tag == dwarf::DW_TAG_imported_declaration && AttrInfo.Name) {
-    Unit.addNamespaceAccelerator(Die, AttrInfo.Name);
   } else if (isTypeTag(Tag) && !AttrInfo.IsDeclaration &&
              getDIENames(InputDIE, AttrInfo, StringPool) && AttrInfo.Name &&
              AttrInfo.Name.getString()[0]) {
diff -ruN --strip-trailing-cr a/llvm/test/tools/dsymutil/ARM/accel-imported-declarations.test b/llvm/test/tools/dsymutil/ARM/accel-imported-declarations.test
--- a/llvm/test/tools/dsymutil/ARM/accel-imported-declarations.test
+++ b/llvm/test/tools/dsymutil/ARM/accel-imported-declarations.test
@@ -1,47 +0,0 @@
-RUN: dsymutil -accelerator=Dwarf %p/../Inputs/accel-imported-declaration.macho-arm64 -o %t.dwarf.dSYM
-RUN: dsymutil -accelerator=Apple %p/../Inputs/accel-imported-declaration.macho-arm64 -o %t.apple.dSYM
-
-RUN: llvm-dwarfdump -v %t.dwarf.dSYM | FileCheck %s -check-prefixes=DWARF,COMMON
-RUN: llvm-dwarfdump -v %t.apple.dSYM | FileCheck %s -check-prefixes=APPLE,COMMON
-
-COMMON: .debug_info contents
-COMMON: {{.*}}DW_TAG_namespace
-COMMON:   DW_AT_name{{.*}}"A"
-COMMON: {{.*}}DW_TAG_namespace
-COMMON:   DW_AT_name{{.*}}"B"
-COMMON: [[NAMESPACE:0x[0-9a-f]*]]:{{.*}}DW_TAG_namespace
-COMMON:   DW_AT_name{{.*}}"C"
-COMMON: [[IMPORTED:0x[0-9a-f]*]]:{{.*}}DW_TAG_imported_declaration
-COMMON:   DW_AT_name{{.*}}"C"
-
-DWARF:      .debug_names contents:
-DWARF:      Bucket 0 [
-DWARF-NEXT:   Name {{.*}} {
-DWARF-NEXT:     Hash: {{.*}}
-DWARF-NEXT:     String: {{.*}} "C"
-DWARF-NEXT:     Entry {{.*}} {
-DWARF-NEXT:       Abbrev: {{.*}}
-DWARF-NEXT:       Tag: DW_TAG_namespace
-DWARF-NEXT:       DW_IDX_die_offset: [[NAMESPACE]]
-DWARF-NEXT:     }
-DWARF-NEXT:     Entry {{.*}} {
-DWARF-NEXT:       Abbrev: {{.*}}
-DWARF-NEXT:       Tag: DW_TAG_imported_declaration
-DWARF-NEXT:       DW_IDX_die_offset: [[IMPORTED]]
-DWARF-NEXT:     }
-DWARF-NEXT:   }
-
-APPLE:      .apple_namespaces contents:
-APPLE:      Bucket 1 [
-APPLE-NEXT:   Hash {{.*}} [
-APPLE-NEXT:     Name@{{.*}} {
-APPLE-NEXT:       String: {{.*}} "C"
-APPLE-NEXT:       Data 0 [
-APPLE-NEXT:         Atom[0]: [[NAMESPACE]]
-APPLE-NEXT:       ]
-APPLE-NEXT:       Data 1 [
-APPLE-NEXT:         Atom[0]: [[IMPORTED]]
-APPLE-NEXT:       ]
-APPLE-NEXT:     }
-APPLE-NEXT:   ]
-APPLE-NEXT: ]
diff -ruN --strip-trailing-cr a/llvm/test/tools/dsymutil/Inputs/accel-imported-declaration.cpp b/llvm/test/tools/dsymutil/Inputs/accel-imported-declaration.cpp
--- a/llvm/test/tools/dsymutil/Inputs/accel-imported-declaration.cpp
+++ b/llvm/test/tools/dsymutil/Inputs/accel-imported-declaration.cpp
@@ -1,17 +0,0 @@
-// Compiled on macOS using:
-// clang++ -c -std=c++2a -gdwarf-4 -O0 -o accel-imported-declaration.macho-arm64.o
-
-namespace A {
-namespace B {
-namespace C {
-int a = -1;
-} // namespace C
-} // namespace B
-
-namespace C = B::C;
-
-using namespace B::C;
-using B::C::a;
-} // namespace A
-
-int main() { return A::a; }
