// RUN: hlo_to_llvm_ir %s | FileCheck %s

// CHECK-LABEL: entry:
// CHECK:         %[[VAL_0:.*]] = getelementptr inbounds i8, i8* %[[VAL_1:.*]], i64 0
// CHECK:         %[[VAL_2:.*]] = bitcast i8* %[[VAL_0]] to [1024 x half]*
// CHECK:         %[[VAL_3:.*]] = getelementptr inbounds i8, i8* %[[VAL_4:.*]], i64 0
// CHECK:         %[[VAL_5:.*]] = bitcast i8* %[[VAL_3]] to [1024 x half]*
// CHECK:         %[[VAL_6:.*]] = getelementptr inbounds i8, i8* %[[VAL_7:.*]], i64 0
// CHECK:         %[[VAL_8:.*]] = bitcast i8* %[[VAL_6]] to [1023 x half]*
// CHECK:         %[[VAL_9:.*]] = getelementptr inbounds i8, i8* %[[VAL_10:.*]], i64 0
// CHECK:         %[[VAL_11:.*]] = bitcast i8* %[[VAL_9]] to [1023 x half]*
// CHECK:         %[[VAL_12:.*]] = getelementptr inbounds i8, i8* %[[VAL_13:.*]], i64 0
// CHECK:         %[[VAL_14:.*]] = bitcast i8* %[[VAL_12]] to [1024 x half]*
// CHECK:         %[[VAL_15:.*]] = getelementptr inbounds i8, i8* %[[VAL_16:.*]], i64 0
// CHECK:         %[[VAL_17:.*]] = bitcast i8* %[[VAL_15]] to [1024 x half]*
// CHECK:         %[[VAL_18:.*]] = getelementptr inbounds i8, i8* %[[VAL_19:.*]], i64 0
// CHECK:         %[[VAL_20:.*]] = bitcast i8* %[[VAL_18]] to [2 x i8*]*
// CHECK:         ret void
// CHECK:       entry:
// CHECK:         %[[VAL_21:.*]] = getelementptr inbounds i8, i8* %[[VAL_22:.*]], i64 0
// CHECK:         %[[VAL_23:.*]] = bitcast i8* %[[VAL_21]] to [1024 x half]*
// CHECK:         %[[VAL_24:.*]] = getelementptr inbounds i8, i8* %[[VAL_25:.*]], i64 0
// CHECK:         %[[VAL_26:.*]] = bitcast i8* %[[VAL_24]] to [1024 x half]*
// CHECK:         %[[VAL_27:.*]] = getelementptr inbounds i8, i8* %[[VAL_28:.*]], i64 0
// CHECK:         %[[VAL_29:.*]] = bitcast i8* %[[VAL_27]] to [1023 x half]*
// CHECK:         %[[VAL_30:.*]] = getelementptr inbounds i8, i8* %[[VAL_31:.*]], i64 0
// CHECK:         %[[VAL_32:.*]] = bitcast i8* %[[VAL_30]] to [1023 x half]*
// CHECK:         %[[VAL_33:.*]] = getelementptr inbounds i8, i8* %[[VAL_34:.*]], i64 0
// CHECK:         %[[VAL_35:.*]] = bitcast i8* %[[VAL_33]] to [1024 x half]*
// CHECK:         %[[VAL_36:.*]] = getelementptr inbounds i8, i8* %[[VAL_37:.*]], i64 0
// CHECK:         %[[VAL_38:.*]] = bitcast i8* %[[VAL_36]] to [1024 x half]*
// CHECK:         %[[VAL_39:.*]] = getelementptr inbounds i8, i8* %[[VAL_40:.*]], i64 0
// CHECK:         %[[VAL_41:.*]] = bitcast i8* %[[VAL_39]] to [2 x i8*]*
// CHECK:         %[[VAL_42:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
// CHECK:         %[[VAL_43:.*]] = icmp eq i32 0, %[[VAL_42]]
// CHECK:         %[[VAL_44:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
// CHECK:         %[[VAL_45:.*]] = icmp eq i32 0, %[[VAL_44]]
// CHECK:         %[[VAL_46:.*]] = and i1 %[[VAL_43]], %[[VAL_45]]
// CHECK:         br i1 %[[VAL_46]], label %[[VAL_47:.*]], label %[[VAL_48:.*]]
// CHECK:       emit_mof_tuple-after:                             ; preds = %[[VAL_47]], %[[VAL_49:.*]]
// CHECK:         %[[VAL_50:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !3
// CHECK:         %[[VAL_51:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !4
// CHECK:         %[[VAL_52:.*]] = mul nuw nsw i32 %[[VAL_50]], 256
// CHECK:         %[[VAL_53:.*]] = add nuw nsw i32 %[[VAL_52]], %[[VAL_51]]
// CHECK:         %[[VAL_54:.*]] = icmp ult i32 %[[VAL_53]], 256
// CHECK:         call void @llvm.assume(i1 %[[VAL_54]])
// CHECK:         %[[VAL_55:.*]] = mul nuw nsw i32 %[[VAL_53]], 4
// CHECK:         %[[VAL_56:.*]] = udiv i32 %[[VAL_55]], 1
// CHECK:         %[[VAL_57:.*]] = add nuw nsw i32 %[[VAL_55]], 1
// CHECK:         %[[VAL_58:.*]] = udiv i32 %[[VAL_57]], 1
// CHECK:         %[[VAL_59:.*]] = add nuw nsw i32 %[[VAL_55]], 2
// CHECK:         %[[VAL_60:.*]] = udiv i32 %[[VAL_59]], 1
// CHECK:         %[[VAL_61:.*]] = add nuw nsw i32 %[[VAL_55]], 3
// CHECK:         %[[VAL_62:.*]] = udiv i32 %[[VAL_61]], 1
// CHECK:         %[[VAL_63:.*]] = icmp ult i32 %[[VAL_55]], 1024
// CHECK:         br i1 %[[VAL_63]], label %[[VAL_64:.*]], label %[[VAL_65:.*]]
// CHECK:       fusion.in_bounds-after:                           ; preds = %[[VAL_66:.*]], %[[VAL_48]]
// CHECK:         ret void
// CHECK:       emit_mof_tuple-true:                              ; preds = %[[VAL_49]]
// CHECK:         %[[VAL_67:.*]] = bitcast [1024 x half]* %[[VAL_35]] to i8*
// CHECK:         %[[VAL_68:.*]] = getelementptr inbounds [2 x i8*], [2 x i8*]* %[[VAL_41]], i64 0, i64 0
// CHECK:         store i8* %[[VAL_67]], i8** %[[VAL_68]], align 8
// CHECK:         %[[VAL_69:.*]] = bitcast [1024 x half]* %[[VAL_38]] to i8*
// CHECK:         %[[VAL_70:.*]] = getelementptr inbounds [2 x i8*], [2 x i8*]* %[[VAL_41]], i64 0, i64 1
// CHECK:         store i8* %[[VAL_69]], i8** %[[VAL_70]], align 8
// CHECK:         br label %[[VAL_48]]
// CHECK:       fusion.in_bounds-true:                            ; preds = %[[VAL_48]]
// CHECK:         %[[VAL_71:.*]] = add i32 %[[VAL_56]], 0
// CHECK:         %[[VAL_72:.*]] = icmp ult i32 %[[VAL_71]], 1024
// CHECK:         br i1 %[[VAL_72]], label %[[VAL_73:.*]], label %[[VAL_74:.*]]
// CHECK:       concat_index_from_operand_id0:                    ; preds = %[[VAL_64]]
// CHECK:         %[[VAL_75:.*]] = phi i32 [ 0, %[[VAL_64]] ]
// CHECK:         %[[VAL_76:.*]] = sub nsw i32 %[[VAL_71]], %[[VAL_75]]
// CHECK:         %[[VAL_77:.*]] = getelementptr inbounds [1024 x half], [1024 x half]* %[[VAL_23]], i32 0, i32 %[[VAL_76]]
// CHECK:         %[[VAL_78:.*]] = load half, half* %[[VAL_77]], align 2, !invariant.load !5
// CHECK:         %[[VAL_79:.*]] = getelementptr inbounds [1024 x half], [1024 x half]* %[[VAL_26]], i32 0, i32 %[[VAL_76]]
// CHECK:         %[[VAL_80:.*]] = load half, half* %[[VAL_79]], align 2, !invariant.load !5
// CHECK:         %[[VAL_81:.*]] = fmul half %[[VAL_78]], %[[VAL_80]]
// CHECK:         br label %[[VAL_82:.*]]
// CHECK:       concat_index_from_operand_id1:                    ; preds = %[[VAL_74]]
// CHECK:         %[[VAL_83:.*]] = phi i32 [ 1024, %[[VAL_74]] ]
// CHECK:         %[[VAL_84:.*]] = sub nsw i32 %[[VAL_71]], %[[VAL_83]]
// CHECK:         %[[VAL_85:.*]] = getelementptr inbounds [1023 x half], [1023 x half]* %[[VAL_29]], i32 0, i32 %[[VAL_84]]
// CHECK:         %[[VAL_86:.*]] = load half, half* %[[VAL_85]], align 2, !invariant.load !5
// CHECK:         %[[VAL_87:.*]] = getelementptr inbounds [1023 x half], [1023 x half]* %[[VAL_32]], i32 0, i32 %[[VAL_84]]
// CHECK:         %[[VAL_88:.*]] = load half, half* %[[VAL_87]], align 2, !invariant.load !5
// CHECK:         %[[VAL_89:.*]] = fadd half %[[VAL_86]], %[[VAL_88]]
// CHECK:         br label %[[VAL_82]]
// CHECK:       concat_index_not_from_operand0:                   ; preds = %[[VAL_64]]
// CHECK:         %[[VAL_90:.*]] = icmp ult i32 %[[VAL_71]], 2047
// CHECK:         br i1 %[[VAL_90]], label %[[VAL_91:.*]], label %[[VAL_92:.*]]
// CHECK:       concat_index_not_from_operand1:                   ; preds = %[[VAL_74]]
// CHECK:         unreachable
// CHECK:       concatenate.7.merge:                              ; preds = %[[VAL_91]], %[[VAL_73]]
// CHECK:         %[[VAL_93:.*]] = phi half [ %[[VAL_81]], %[[VAL_73]] ], [ %[[VAL_89]], %[[VAL_91]] ]
// CHECK:         %[[VAL_94:.*]] = insertvalue { half, half } undef, half %[[VAL_93]], 0
// CHECK:         %[[VAL_95:.*]] = add i32 %[[VAL_56]], 0
// CHECK:         %[[VAL_96:.*]] = getelementptr inbounds [1024 x half], [1024 x half]* %[[VAL_23]], i32 0, i32 %[[VAL_95]]
// CHECK:         %[[VAL_97:.*]] = load half, half* %[[VAL_96]], align 2, !invariant.load !5
// CHECK:         %[[VAL_98:.*]] = getelementptr inbounds [1024 x half], [1024 x half]* %[[VAL_26]], i32 0, i32 %[[VAL_95]]
// CHECK:         %[[VAL_99:.*]] = load half, half* %[[VAL_98]], align 2, !invariant.load !5
// CHECK:         %[[VAL_100:.*]] = fmul half %[[VAL_97]], %[[VAL_99]]
// CHECK:         %[[VAL_101:.*]] = insertvalue { half, half } %[[VAL_94]], half %[[VAL_100]], 1
// CHECK:         %[[VAL_102:.*]] = extractvalue { half, half } %[[VAL_101]], 0
// CHECK:         %[[VAL_103:.*]] = bitcast [1024 x half]* %[[VAL_35]] to half*
// CHECK:         %[[VAL_104:.*]] = getelementptr inbounds half, half* %[[VAL_103]], i32 %[[VAL_55]]
// CHECK:         store half %[[VAL_102]], half* %[[VAL_104]], align 2
// CHECK:         %[[VAL_105:.*]] = extractvalue { half, half } %[[VAL_101]], 1
// CHECK:         %[[VAL_106:.*]] = bitcast [1024 x half]* %[[VAL_38]] to half*
// CHECK:         %[[VAL_107:.*]] = getelementptr inbounds half, half* %[[VAL_106]], i32 %[[VAL_55]]
// CHECK:         store half %[[VAL_105]], half* %[[VAL_107]], align 2
// CHECK:         %[[VAL_108:.*]] = add i32 %[[VAL_58]], 0
// CHECK:         %[[VAL_109:.*]] = icmp ult i32 %[[VAL_108]], 1024
// CHECK:         br i1 %[[VAL_109]], label %[[VAL_110:.*]], label %[[VAL_111:.*]]
// CHECK:       concat_index_from_operand_id06:                   ; preds = %[[VAL_82]]
// CHECK:         %[[VAL_112:.*]] = phi i32 [ 0, %[[VAL_82]] ]
// CHECK:         %[[VAL_113:.*]] = sub nsw i32 %[[VAL_108]], %[[VAL_112]]
// CHECK:         %[[VAL_114:.*]] = getelementptr inbounds [1024 x half], [1024 x half]* %[[VAL_23]], i32 0, i32 %[[VAL_113]]
// CHECK:         %[[VAL_115:.*]] = load half, half* %[[VAL_114]], align 2, !invariant.load !5
// CHECK:         %[[VAL_116:.*]] = getelementptr inbounds [1024 x half], [1024 x half]* %[[VAL_26]], i32 0, i32 %[[VAL_113]]
// CHECK:         %[[VAL_117:.*]] = load half, half* %[[VAL_116]], align 2, !invariant.load !5
// CHECK:         %[[VAL_118:.*]] = fmul half %[[VAL_115]], %[[VAL_117]]
// CHECK:         br label %[[VAL_119:.*]]
// CHECK:       concat_index_from_operand_id18:                   ; preds = %[[VAL_111]]
// CHECK:         %[[VAL_120:.*]] = phi i32 [ 1024, %[[VAL_111]] ]
// CHECK:         %[[VAL_121:.*]] = sub nsw i32 %[[VAL_108]], %[[VAL_120]]
// CHECK:         %[[VAL_122:.*]] = getelementptr inbounds [1023 x half], [1023 x half]* %[[VAL_29]], i32 0, i32 %[[VAL_121]]
// CHECK:         %[[VAL_123:.*]] = load half, half* %[[VAL_122]], align 2, !invariant.load !5
// CHECK:         %[[VAL_124:.*]] = getelementptr inbounds [1023 x half], [1023 x half]* %[[VAL_32]], i32 0, i32 %[[VAL_121]]
// CHECK:         %[[VAL_125:.*]] = load half, half* %[[VAL_124]], align 2, !invariant.load !5
// CHECK:         %[[VAL_126:.*]] = fadd half %[[VAL_123]], %[[VAL_125]]
// CHECK:         br label %[[VAL_119]]
// CHECK:       concat_index_not_from_operand010:                 ; preds = %[[VAL_82]]
// CHECK:         %[[VAL_127:.*]] = icmp ult i32 %[[VAL_108]], 2047
// CHECK:         br i1 %[[VAL_127]], label %[[VAL_128:.*]], label %[[VAL_129:.*]]
// CHECK:       concat_index_not_from_operand111:                 ; preds = %[[VAL_111]]
// CHECK:         unreachable
// CHECK:       concatenate.7.merge5:                             ; preds = %[[VAL_128]], %[[VAL_110]]
// CHECK:         %[[VAL_130:.*]] = phi half [ %[[VAL_118]], %[[VAL_110]] ], [ %[[VAL_126]], %[[VAL_128]] ]
// CHECK:         %[[VAL_131:.*]] = insertvalue { half, half } undef, half %[[VAL_130]], 0
// CHECK:         %[[VAL_132:.*]] = add i32 %[[VAL_58]], 0
// CHECK:         %[[VAL_133:.*]] = getelementptr inbounds [1024 x half], [1024 x half]* %[[VAL_23]], i32 0, i32 %[[VAL_132]]
// CHECK:         %[[VAL_134:.*]] = load half, half* %[[VAL_133]], align 2, !invariant.load !5
// CHECK:         %[[VAL_135:.*]] = getelementptr inbounds [1024 x half], [1024 x half]* %[[VAL_26]], i32 0, i32 %[[VAL_132]]
// CHECK:         %[[VAL_136:.*]] = load half, half* %[[VAL_135]], align 2, !invariant.load !5
// CHECK:         %[[VAL_137:.*]] = fmul half %[[VAL_134]], %[[VAL_136]]
// CHECK:         %[[VAL_138:.*]] = insertvalue { half, half } %[[VAL_131]], half %[[VAL_137]], 1
// CHECK:         %[[VAL_139:.*]] = extractvalue { half, half } %[[VAL_138]], 0
// CHECK:         %[[VAL_140:.*]] = bitcast [1024 x half]* %[[VAL_35]] to half*
// CHECK:         %[[VAL_141:.*]] = getelementptr inbounds half, half* %[[VAL_140]], i32 %[[VAL_57]]
// CHECK:         store half %[[VAL_139]], half* %[[VAL_141]], align 2
// CHECK:         %[[VAL_142:.*]] = extractvalue { half, half } %[[VAL_138]], 1
// CHECK:         %[[VAL_143:.*]] = bitcast [1024 x half]* %[[VAL_38]] to half*
// CHECK:         %[[VAL_144:.*]] = getelementptr inbounds half, half* %[[VAL_143]], i32 %[[VAL_57]]
// CHECK:         store half %[[VAL_142]], half* %[[VAL_144]], align 2
// CHECK:         %[[VAL_145:.*]] = add i32 %[[VAL_60]], 0
// CHECK:         %[[VAL_146:.*]] = icmp ult i32 %[[VAL_145]], 1024
// CHECK:         br i1 %[[VAL_146]], label %[[VAL_147:.*]], label %[[VAL_148:.*]]
// CHECK:       concat_index_from_operand_id014:                  ; preds = %[[VAL_119]]
// CHECK:         %[[VAL_149:.*]] = phi i32 [ 0, %[[VAL_119]] ]
// CHECK:         %[[VAL_150:.*]] = sub nsw i32 %[[VAL_145]], %[[VAL_149]]
// CHECK:         %[[VAL_151:.*]] = getelementptr inbounds [1024 x half], [1024 x half]* %[[VAL_23]], i32 0, i32 %[[VAL_150]]
// CHECK:         %[[VAL_152:.*]] = load half, half* %[[VAL_151]], align 2, !invariant.load !5
// CHECK:         %[[VAL_153:.*]] = getelementptr inbounds [1024 x half], [1024 x half]* %[[VAL_26]], i32 0, i32 %[[VAL_150]]
// CHECK:         %[[VAL_154:.*]] = load half, half* %[[VAL_153]], align 2, !invariant.load !5
// CHECK:         %[[VAL_155:.*]] = fmul half %[[VAL_152]], %[[VAL_154]]
// CHECK:         br label %[[VAL_156:.*]]
// CHECK:       concat_index_from_operand_id116:                  ; preds = %[[VAL_148]]
// CHECK:         %[[VAL_157:.*]] = phi i32 [ 1024, %[[VAL_148]] ]
// CHECK:         %[[VAL_158:.*]] = sub nsw i32 %[[VAL_145]], %[[VAL_157]]
// CHECK:         %[[VAL_159:.*]] = getelementptr inbounds [1023 x half], [1023 x half]* %[[VAL_29]], i32 0, i32 %[[VAL_158]]
// CHECK:         %[[VAL_160:.*]] = load half, half* %[[VAL_159]], align 2, !invariant.load !5
// CHECK:         %[[VAL_161:.*]] = getelementptr inbounds [1023 x half], [1023 x half]* %[[VAL_32]], i32 0, i32 %[[VAL_158]]
// CHECK:         %[[VAL_162:.*]] = load half, half* %[[VAL_161]], align 2, !invariant.load !5
// CHECK:         %[[VAL_163:.*]] = fadd half %[[VAL_160]], %[[VAL_162]]
// CHECK:         br label %[[VAL_156]]
// CHECK:       concat_index_not_from_operand018:                 ; preds = %[[VAL_119]]
// CHECK:         %[[VAL_164:.*]] = icmp ult i32 %[[VAL_145]], 2047
// CHECK:         br i1 %[[VAL_164]], label %[[VAL_165:.*]], label %[[VAL_166:.*]]
// CHECK:       concat_index_not_from_operand119:                 ; preds = %[[VAL_148]]
// CHECK:         unreachable
// CHECK:       concatenate.7.merge13:                            ; preds = %[[VAL_165]], %[[VAL_147]]
// CHECK:         %[[VAL_167:.*]] = phi half [ %[[VAL_155]], %[[VAL_147]] ], [ %[[VAL_163]], %[[VAL_165]] ]
// CHECK:         %[[VAL_168:.*]] = insertvalue { half, half } undef, half %[[VAL_167]], 0
// CHECK:         %[[VAL_169:.*]] = add i32 %[[VAL_60]], 0
// CHECK:         %[[VAL_170:.*]] = getelementptr inbounds [1024 x half], [1024 x half]* %[[VAL_23]], i32 0, i32 %[[VAL_169]]
// CHECK:         %[[VAL_171:.*]] = load half, half* %[[VAL_170]], align 2, !invariant.load !5
// CHECK:         %[[VAL_172:.*]] = getelementptr inbounds [1024 x half], [1024 x half]* %[[VAL_26]], i32 0, i32 %[[VAL_169]]
// CHECK:         %[[VAL_173:.*]] = load half, half* %[[VAL_172]], align 2, !invariant.load !5
// CHECK:         %[[VAL_174:.*]] = fmul half %[[VAL_171]], %[[VAL_173]]
// CHECK:         %[[VAL_175:.*]] = insertvalue { half, half } %[[VAL_168]], half %[[VAL_174]], 1
// CHECK:         %[[VAL_176:.*]] = extractvalue { half, half } %[[VAL_175]], 0
// CHECK:         %[[VAL_177:.*]] = bitcast [1024 x half]* %[[VAL_35]] to half*
// CHECK:         %[[VAL_178:.*]] = getelementptr inbounds half, half* %[[VAL_177]], i32 %[[VAL_59]]
// CHECK:         store half %[[VAL_176]], half* %[[VAL_178]], align 2
// CHECK:         %[[VAL_179:.*]] = extractvalue { half, half } %[[VAL_175]], 1
// CHECK:         %[[VAL_180:.*]] = bitcast [1024 x half]* %[[VAL_38]] to half*
// CHECK:         %[[VAL_181:.*]] = getelementptr inbounds half, half* %[[VAL_180]], i32 %[[VAL_59]]
// CHECK:         store half %[[VAL_179]], half* %[[VAL_181]], align 2
// CHECK:         %[[VAL_182:.*]] = add i32 %[[VAL_62]], 0
// CHECK:         %[[VAL_183:.*]] = icmp ult i32 %[[VAL_182]], 1024
// CHECK:         br i1 %[[VAL_183]], label %[[VAL_184:.*]], label %[[VAL_185:.*]]
// CHECK:       concat_index_from_operand_id022:                  ; preds = %[[VAL_156]]
// CHECK:         %[[VAL_186:.*]] = phi i32 [ 0, %[[VAL_156]] ]
// CHECK:         %[[VAL_187:.*]] = sub nsw i32 %[[VAL_182]], %[[VAL_186]]
// CHECK:         %[[VAL_188:.*]] = getelementptr inbounds [1024 x half], [1024 x half]* %[[VAL_23]], i32 0, i32 %[[VAL_187]]
// CHECK:         %[[VAL_189:.*]] = load half, half* %[[VAL_188]], align 2, !invariant.load !5
// CHECK:         %[[VAL_190:.*]] = getelementptr inbounds [1024 x half], [1024 x half]* %[[VAL_26]], i32 0, i32 %[[VAL_187]]
// CHECK:         %[[VAL_191:.*]] = load half, half* %[[VAL_190]], align 2, !invariant.load !5
// CHECK:         %[[VAL_192:.*]] = fmul half %[[VAL_189]], %[[VAL_191]]
// CHECK:         br label %[[VAL_66]]
// CHECK:       concat_index_from_operand_id124:                  ; preds = %[[VAL_185]]
// CHECK:         %[[VAL_193:.*]] = phi i32 [ 1024, %[[VAL_185]] ]
// CHECK:         %[[VAL_194:.*]] = sub nsw i32 %[[VAL_182]], %[[VAL_193]]
// CHECK:         %[[VAL_195:.*]] = getelementptr inbounds [1023 x half], [1023 x half]* %[[VAL_29]], i32 0, i32 %[[VAL_194]]
// CHECK:         %[[VAL_196:.*]] = load half, half* %[[VAL_195]], align 2, !invariant.load !5
// CHECK:         %[[VAL_197:.*]] = getelementptr inbounds [1023 x half], [1023 x half]* %[[VAL_32]], i32 0, i32 %[[VAL_194]]
// CHECK:         %[[VAL_198:.*]] = load half, half* %[[VAL_197]], align 2, !invariant.load !5
// CHECK:         %[[VAL_199:.*]] = fadd half %[[VAL_196]], %[[VAL_198]]
// CHECK:         br label %[[VAL_66]]
// CHECK:       concat_index_not_from_operand026:                 ; preds = %[[VAL_156]]
// CHECK:         %[[VAL_200:.*]] = icmp ult i32 %[[VAL_182]], 2047
// CHECK:         br i1 %[[VAL_200]], label %[[VAL_201:.*]], label %[[VAL_202:.*]]
// CHECK:       concat_index_not_from_operand127:                 ; preds = %[[VAL_185]]
// CHECK:         unreachable
// CHECK:       concatenate.7.merge21:                            ; preds = %[[VAL_201]], %[[VAL_184]]
// CHECK:         %[[VAL_203:.*]] = phi half [ %[[VAL_192]], %[[VAL_184]] ], [ %[[VAL_199]], %[[VAL_201]] ]
// CHECK:         %[[VAL_204:.*]] = insertvalue { half, half } undef, half %[[VAL_203]], 0
// CHECK:         %[[VAL_205:.*]] = add i32 %[[VAL_62]], 0
// CHECK:         %[[VAL_206:.*]] = getelementptr inbounds [1024 x half], [1024 x half]* %[[VAL_23]], i32 0, i32 %[[VAL_205]]
// CHECK:         %[[VAL_207:.*]] = load half, half* %[[VAL_206]], align 2, !invariant.load !5
// CHECK:         %[[VAL_208:.*]] = getelementptr inbounds [1024 x half], [1024 x half]* %[[VAL_26]], i32 0, i32 %[[VAL_205]]
// CHECK:         %[[VAL_209:.*]] = load half, half* %[[VAL_208]], align 2, !invariant.load !5
// CHECK:         %[[VAL_210:.*]] = fmul half %[[VAL_207]], %[[VAL_209]]
// CHECK:         %[[VAL_211:.*]] = insertvalue { half, half } %[[VAL_204]], half %[[VAL_210]], 1
// CHECK:         %[[VAL_212:.*]] = extractvalue { half, half } %[[VAL_211]], 0
// CHECK:         %[[VAL_213:.*]] = bitcast [1024 x half]* %[[VAL_35]] to half*
// CHECK:         %[[VAL_214:.*]] = getelementptr inbounds half, half* %[[VAL_213]], i32 %[[VAL_61]]
// CHECK:         store half %[[VAL_212]], half* %[[VAL_214]], align 2
// CHECK:         %[[VAL_215:.*]] = extractvalue { half, half } %[[VAL_211]], 1
// CHECK:         %[[VAL_216:.*]] = bitcast [1024 x half]* %[[VAL_38]] to half*
// CHECK:         %[[VAL_217:.*]] = getelementptr inbounds half, half* %[[VAL_216]], i32 %[[VAL_61]]
// CHECK:         store half %[[VAL_215]], half* %[[VAL_217]], align 2
// CHECK:         br label %[[VAL_65]]
HloModule input_fusion_with_a_tuple_of_slices

fused_computation {
  arg.1 = f16[1024]{0} parameter(0)
  arg.2 = f16[1024]{0} parameter(1)
  arg.3 = f16[1023]{0} parameter(2)
  arg.4 = f16[1023]{0} parameter(3)
  mul.1 = f16[1024]{0} multiply(arg.1, arg.2)
  add.1 = f16[1023]{0} add(arg.3, arg.4)
  concat.1 = f16[2047]{0} concatenate(mul.1, add.1), dimensions={0}
  slice.1 = f16[1024]{0} slice(concat.1), slice={[0:1024]}
  slice.2 = f16[1024]{0} slice(mul.1), slice={[0:1024]}
  ROOT tuple.1 = (f16[1024]{0}, f16[1024]{0}) tuple(slice.1, slice.2)
}

ENTRY kernel_entry {
  arg.1 = f16[1024]{0} parameter(0)
  arg.2 = f16[1024]{0} parameter(1)
  arg.3 = f16[1023]{0} parameter(2)
  arg.4 = f16[1023]{0} parameter(3)
  ROOT fusion = (f16[1024]{0}, f16[1024]{0})
      fusion(arg.1, arg.2, arg.3, arg.4), kind=kLoop, calls=fused_computation
}
